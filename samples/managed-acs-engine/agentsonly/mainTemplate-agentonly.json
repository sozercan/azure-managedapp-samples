{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "AzureCNINetworkMonitorImageURL": {
      "defaultValue": "",
      "metadata": {
        "description": "Azure CNI networkmonitor Image URL"
      },
      "type": "string"
    },
    "acsengineVersion": {
      "metadata": {
        "description": "Contains details of the acs-engine version which was used to provision the cluster"
      },
      "type": "string",
      "defaultValue": "canary"
    },
    "agentpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpool1Subnet": {
      "defaultValue": "10.240.0.0/12",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpool1'."
      },
      "type": "string"
    },
    "agentpool1VMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11-1_v2",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12-1_v2",
        "Standard_DS12-2_v2",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16-4s_v3",
        "Standard_E16-8s_v3",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4-2s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E64is_v3",
        "Standard_E64s_v3",
        "Standard_E8-2s_v3",
        "Standard_E8-4s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L16s_v2",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L8s_v2",
        "Standard_M128",
        "Standard_M128-32ms",
        "Standard_M128-64ms",
        "Standard_M128m",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M16-4ms",
        "Standard_M16-8ms",
        "Standard_M16ms",
        "Standard_M32-16ms",
        "Standard_M32-8ms",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M32ts",
        "Standard_M64",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ls",
        "Standard_M64m",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_M8-2ms",
        "Standard_M8-4ms",
        "Standard_M8ms",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC12s_v3",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24rs_v3",
        "Standard_NC24s_v2",
        "Standard_NC24s_v3",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_NC6s_v3",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpool1osImageName": {
      "defaultValue": "",
      "metadata": {
        "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
      },
      "type": "string"
    },
    "agentpool1osImageOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Linux OS image type."
      },
      "type": "string"
    },
    "agentpool1osImagePublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "OS image publisher."
      },
      "type": "string"
    },
    "agentpool1osImageResourceGroup": {
      "defaultValue": "",
      "metadata": {
        "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
      },
      "type": "string"
    },
    "agentpool1osImageSKU": {
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "OS image SKU."
      },
      "type": "string"
    },
    "agentpool1osImageVersion": {
      "defaultValue": "16.04.201804050",
      "metadata": {
        "description": "OS image version."
      },
      "type": "string"
    },
    "apiServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string",
      "defaultValue": ""
    },
    "apiServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring",
      "defaultValue": ""
    },
    "caCertificate": {
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      },
      "type": "string",
      "defaultValue": ""
    },
    "caPrivateKey": {
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 CA private key used on the master."
      },
      "type": "securestring"
    },
    "clientCertificate": {
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"
      },
      "type": "string",
      "defaultValue": ""
    },
    "clientPrivateKey": {
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"
      },
      "type": "securestring",
      "defaultValue": ""
    },
    "cloudProviderBackoff": {
      "defaultValue": "",
      "metadata": {
        "description": "Enable cloudprovider backoff?"
      },
      "type": "string"
    },
    "cloudProviderBackoffDuration": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, how long until timeout"
      },
      "type": "string"
    },
    "cloudProviderBackoffExponent": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, retry exponent"
      },
      "type": "string"
    },
    "cloudProviderBackoffJitter": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, jitter factor between retries"
      },
      "type": "string"
    },
    "cloudProviderBackoffRetries": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, how many times to retry"
      },
      "type": "string"
    },
    "cloudProviderRatelimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Enable cloudprovider rate limiting?"
      },
      "type": "string"
    },
    "cloudProviderRatelimitBucket": {
      "defaultValue": "",
      "metadata": {
        "description": "If rate limiting enabled, bucket size"
      },
      "type": "string"
    },
    "cloudProviderRatelimitQPS": {
      "defaultValue": "",
      "metadata": {
        "description": "If rate limiting enabled, target maximum QPS"
      },
      "type": "string"
    },
    "cniPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/cni-plugins-amd64-latest.tgz",
      "type": "string"
    },
    "containerRuntime": {
      "allowedValues": [
        "docker",
        "clear-containers",
        "kata-containers",
        "containerd"
      ],
      "defaultValue": "docker",
      "metadata": {
        "description": "The container runtime to use (docker|clear-containers|kata-containers|containerd)"
      },
      "type": "string"
    },
    "dockerBridgeCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Docker bridge network IP address and subnet"
      },
      "type": "string"
    },
    "dockerEngineDownloadRepo": {
      "defaultValue": "https://aptdocker.azureedge.net/repo",
      "metadata": {
        "description": "The docker engine download url for kubernetes."
      },
      "type": "string"
    },
    "dockerEngineVersion": {
      "allowedValues": [
        "17.05.*",
        "17.04.*",
        "17.03.*",
        "1.13.*",
        "1.12.*",
        "1.11.*"
      ],
      "defaultValue": "1.13.*",
      "metadata": {
        "description": "The docker engine version to install."
      },
      "type": "string"
    },
    "etcdClientCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string",
      "defaultValue": ""
    },
    "etcdClientPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring",
      "defaultValue": ""
    },
    "etcdDiskSizeGB": {
      "defaultValue": "",
      "metadata": {
        "description": "Size in GB to allocate for etcd volume"
      },
      "type": "string"
    },
    "etcdDownloadURLBase": {
      "defaultValue": "",
      "metadata": {
        "description": "etcd image base URL"
      },
      "type": "string"
    },
    "etcdEncryptionKey": {
      "metadata": {
        "description": "Encryption at rest key for etcd"
      },
      "type": "string",
      "defaultValue": ""
    },
    "etcdPeerCertificate0": {
      "metadata": {
        "description": "The base 64 server certificates used on the master"
      },
      "type": "string",
      "defaultValue": ""
    },
    "etcdPeerPrivateKey0": {
      "metadata": {
        "description": "The base 64 server private keys used on the master."
      },
      "type": "securestring",
      "defaultValue": ""
    },
    "etcdServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string",
      "defaultValue": ""
    },
    "etcdServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring",
      "defaultValue": ""
    },
    "etcdVersion": {
      "defaultValue": "",
      "metadata": {
        "description": "etcd version"
      },
      "type": "string"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.255.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "fqdnEndpointSuffix": {
      "defaultValue": "cloudapp.azure.com",
      "metadata": {
        "description": "Endpoint of FQDN."
      },
      "type": "string"
    },
    "gcHighThreshold": {
      "defaultValue": 85,
      "metadata": {
        "description": "High Threshold for Image Garbage collection on each node"
      },
      "type": "int"
    },
    "gcLowThreshold": {
      "defaultValue": 80,
      "metadata": {
        "description": "Low Threshold for Image Garbage collection on each node."
      },
      "type": "int"
    },
    "generatorCode": {
      "defaultValue": "",
      "metadata": {
        "description": "The generator code used to identify the generator"
      },
      "type": "string"
    },
    "kubeClusterCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes cluster subnet"
      },
      "type": "string"
    },
    "kubeConfigCertificate": {
      "metadata": {
        "description": "The base 64 certificate used by cli to communicate with the master"
      },
      "type": "string",
      "defaultValue": ""
    },
    "kubeConfigPrivateKey": {
      "metadata": {
        "description": "The base 64 private key used by cli to communicate with the master"
      },
      "type": "securestring",
      "defaultValue": ""
    },
    "kubeDNSServiceIP": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes DNS IP"
      },
      "type": "string"
    },
    "kubeServiceCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes service address space"
      },
      "type": "string"
    },
    "kubernetesACIConnectorCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector CPU Limit"
      },
      "type": "string"
    },
    "kubernetesACIConnectorCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector CPU Requests"
      },
      "type": "string"
    },
    "kubernetesACIConnectorEnabled": {
      "defaultValue": false,
      "metadata": {
        "description": "ACI Connector Status"
      },
      "type": "bool"
    },
    "kubernetesACIConnectorMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector Memory Limit"
      },
      "type": "string"
    },
    "kubernetesACIConnectorMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector Memory Requests"
      },
      "type": "string"
    },
    "kubernetesACIConnectorNodeName": {
      "defaultValue": "",
      "metadata": {
        "description": "Node name for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorOS": {
      "defaultValue": "",
      "metadata": {
        "description": "OS for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorRegion": {
      "defaultValue": "",
      "metadata": {
        "description": "Region for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorTaint": {
      "defaultValue": "",
      "metadata": {
        "description": "Taint for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesAddonManagerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesAddonResizerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for addon-resizer."
      },
      "type": "string"
    },
    "kubernetesCcmImageSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for cloud-controller-manager."
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerAzureCloud": {
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure cloud for the cluster autoscaler."
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Cluster autoscaler cpu limit"
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Cluster autoscaler cpu requests"
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerEnabled": {
      "defaultValue": false,
      "metadata": {
        "description": "Cluster autoscaler status"
      },
      "type": "bool"
    },
    "kubernetesClusterAutoscalerMaxNodes": {
      "defaultValue": "",
      "metadata": {
        "description": "Cluster autoscaler max nodes"
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Cluster autoscaler memory limit"
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Cluster autoscaler memory requests"
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerMinNodes": {
      "defaultValue": "",
      "metadata": {
        "description": "Cluster autoscaler min nodes"
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for the cluster autoscaler."
      },
      "type": "string"
    },
    "kubernetesClusterAutoscalerUseManagedIdentity": {
      "defaultValue": "",
      "metadata": {
        "description": "Managed identity for the cluster autoscaler addon"
      },
      "type": "string"
    },
    "kubernetesDNSMasqSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kube-dnsmasq-amd64."
      },
      "type": "string"
    },
    "kubernetesDashboardCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard CPU Limit."
      },
      "type": "string"
    },
    "kubernetesDashboardCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard CPU Requests."
      },
      "type": "string"
    },
    "kubernetesDashboardMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard Memory Limit."
      },
      "type": "string"
    },
    "kubernetesDashboardMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard Memory Requests."
      },
      "type": "string"
    },
    "kubernetesDashboardSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubernetes-dashboard-amd64."
      },
      "type": "string"
    },
    "kubernetesExecHealthzSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for exechealthz-amd64."
      },
      "type": "string"
    },
    "kubernetesHeapsterSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for heapster."
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesKubeDNSSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubedns-amd64."
      },
      "type": "string"
    },
    "kubernetesKubeletClusterDomain": {
      "metadata": {
        "description": "--cluster-domain Kubelet config"
      },
      "type": "string",
      "defaultValue": ""
    },
    "kubernetesMetricsServerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for Metrics Server."
      },
      "type": "string"
    },
    "kubernetesNVIDIADevicePluginSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for NVIDIA Device Plugin."
      },
      "type": "string"
    },
    "kubernetesNonMasqueradeCidr": {
      "metadata": {
        "description": "kubernetesNonMasqueradeCidr cluster subnet"
      },
      "type": "string",
      "defaultValue": ""
    },
    "kubernetesOMSAgentCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS Agent CPU limit resource limit"
      },
      "type": "string"
    },
    "kubernetesOMSAgentCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS Agent CPU requests resource limit"
      },
      "type": "string"
    },
    "kubernetesOMSAgentMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS Agent memory limit resource limit"
      },
      "type": "string"
    },
    "kubernetesOMSAgentMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS Agent memory requests resource limit"
      },
      "type": "string"
    },
    "kubernetesPodInfraContainerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for pod infra."
      },
      "type": "string"
    },
    "kubernetesReschedulerCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler CPU Limit."
      },
      "type": "string"
    },
    "kubernetesReschedulerCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler CPU Requests."
      },
      "type": "string"
    },
    "kubernetesReschedulerMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler Memory Limit."
      },
      "type": "string"
    },
    "kubernetesReschedulerMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler Memory Requests."
      },
      "type": "string"
    },
    "kubernetesReschedulerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for rescheduler."
      },
      "type": "string"
    },
    "kubernetesTillerCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller CPU Limit."
      },
      "type": "string"
    },
    "kubernetesTillerCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller CPU Requests."
      },
      "type": "string"
    },
    "kubernetesTillerMaxHistory": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Max History to Store. '0' for no limit."
      },
      "type": "string"
    },
    "kubernetesTillerMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Memory Limit."
      },
      "type": "string"
    },
    "kubernetesTillerMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Memory Requests."
      },
      "type": "string"
    },
    "kubernetesTillerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for Helm Tiller."
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string",
      "defaultValue": ""
    },
    "location": {
      "defaultValue": "",
      "metadata": {
        "description": "Sets the location for all resources in the cluster"
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string",
      "defaultValue": ""
    },
    "masterOffset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the master pool where to start creating master VMs.  This value can be from 0 to 4, but must be less than masterCount."
      },
      "type": "int"
    },
    "masterSubnet": {
      "defaultValue": "10.240.0.0/12",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "agentSubnet": {
      "defaultValue": "10.240.0.0/12",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11-1_v2",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12-1_v2",
        "Standard_DS12-2_v2",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16-4s_v3",
        "Standard_E16-8s_v3",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4-2s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E64is_v3",
        "Standard_E64s_v3",
        "Standard_E8-2s_v3",
        "Standard_E8-4s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L16s_v2",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L8s_v2",
        "Standard_M128",
        "Standard_M128-32ms",
        "Standard_M128-64ms",
        "Standard_M128m",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M16-4ms",
        "Standard_M16-8ms",
        "Standard_M16ms",
        "Standard_M32-16ms",
        "Standard_M32-8ms",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M32ts",
        "Standard_M64",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ls",
        "Standard_M64m",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_M8-2ms",
        "Standard_M8-4ms",
        "Standard_M8ms",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC12s_v3",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24rs_v3",
        "Standard_NC24s_v2",
        "Standard_NC24s_v3",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_NC6s_v3",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string",
      "defaultValue": "Standard_D2_v2"
    },
    "maxPods": {
      "defaultValue": 30,
      "metadata": {
        "description": "This param has been deprecated."
      },
      "type": "int"
    },
    "nameSuffix": {
      "defaultValue": "47478282",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "networkPlugin": {
      "allowedValues": [
        "kubenet",
        "azure",
        "flannel",
        "cilium"
      ],
      "defaultValue": "azure",
      "metadata": {
        "description": "The network plugin to use for Kubernetes (kubenet|azure|flannel|cilium)"
      },
      "type": "string"
    },
    "networkPolicy": {
      "allowedValues": [
        "",
        "none",
        "azure",
        "calico",
        "cilium"
      ],
      "defaultValue": "",
      "metadata": {
        "description": "The network policy enforcement to use (calico|cilium); 'none' and 'azure' here for backwards compatibility"
      },
      "type": "string"
    },
    "omsAgentDockerProviderVersion": {
      "defaultValue": "",
      "metadata": {
        "description": "Docker provider version for Container Monitoring."
      },
      "type": "string"
    },
    "omsAgentImage": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS agent image for Container Monitoring."
      },
      "type": "string"
    },
    "omsAgentVersion": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS agent version for Container Monitoring."
      },
      "type": "string"
    },
    "omsAgentWorkspaceGuid": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace guid"
      },
      "type": "string"
    },
    "omsAgentWorkspaceKey": {
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace key"
      },
      "type": "string"
    },
    "orchestratorName": {
      "defaultValue": "k8s",
      "maxLength": 3,
      "metadata": {
        "description": "The orchestrator name used to identify the orchestrator.  This must be no more than 3 digits in length, otherwise it will exceed Windows Naming"
      },
      "minLength": 3,
      "type": "string"
    },
    "osImageName": {
      "defaultValue": "",
      "metadata": {
        "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
      },
      "type": "string"
    },
    "osImageOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Linux OS image type."
      },
      "type": "string"
    },
    "osImagePublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "OS image publisher."
      },
      "type": "string"
    },
    "osImageResourceGroup": {
      "defaultValue": "",
      "metadata": {
        "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
      },
      "type": "string"
    },
    "osImageSKU": {
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "OS image SKU."
      },
      "type": "string"
    },
    "osImageVersion": {
      "defaultValue": "16.04.201804050",
      "metadata": {
        "description": "OS image version."
      },
      "type": "string"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string",
      "defaultValue": ""
    },
    "targetEnvironment": {
      "defaultValue": "AzurePublicCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzurePublicCloud, AzureChinaCloud"
      },
      "type": "string"
    },
    "vnetCidr": {
      "defaultValue": "10.0.0.0/8",
      "metadata": {
        "description": "Cluster vnet cidr"
      },
      "type": "string"
    },
    "agentVnetCidr": {
      "defaultValue": "172.40.0.0/16",
      "metadata": {
        "description": "agent vnet cidr"
      },
      "type": "string"
    },
    "vnetCniLinuxPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-linux-amd64-latest.tgz",
      "type": "string"
    },
    "vnetCniWindowsPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-windows-amd64-latest.zip",
      "type": "string"
    }
  },
  "variables": {
    "AzureCNINetworkMonitorImageURL": "[parameters('AzureCNINetworkMonitorImageURL')]",
    "acsengineVersion": "[parameters('acsengineVersion')]",
    "agentpool1Count": "[parameters('agentpool1Count')]",
    "agentpool1Index": 0,
    "agentpool1SubnetName": "[variables('agentSubnetName')]",
    "agentpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'), '-vmss')]",
    "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
    "agentpool1VnetSubnetID": "[variables('vnetSubnetID')]",
    "agentpool1osImageName": "[parameters('agentpool1osImageName')]",
    "agentpool1osImageOffer": "[parameters('agentpool1osImageOffer')]",
    "agentpool1osImagePublisher": "[parameters('agentpool1osImagePublisher')]",
    "agentpool1osImageResourceGroup": "[parameters('agentpool1osImageResourceGroup')]",
    "agentpool1osImageSKU": "[parameters('agentpool1osImageSKU')]",
    "agentpool1osImageVersion": "[parameters('agentpool1osImageVersion')]",
    "allocateNodeCidrs": false,
    "apiServerCertificate": "[parameters('apiServerCertificate')]",
    "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
    "apiVersionAcceleratedNetworking": "2018-04-01",
    "apiVersionDefault": "2016-03-30",
    "apiVersionLinkDefault": "2015-01-01",
    "apiVersionStorageManagedDisks": "2016-04-30-preview",
    "apiVersionVirtualMachineScaleSets": "2017-12-01",
    "caCertificate": "[parameters('caCertificate')]",
    "caPrivateKey": "[parameters('caPrivateKey')]",
    "clientCertificate": "[parameters('clientCertificate')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]",
    "cloudProviderBackoff": "[parameters('cloudProviderBackoff')]",
    "cloudProviderBackoffDuration": "[parameters('cloudProviderBackoffDuration')]",
    "cloudProviderBackoffExponent": "[parameters('cloudProviderBackoffExponent')]",
    "cloudProviderBackoffJitter": "[parameters('cloudProviderBackoffJitter')]",
    "cloudProviderBackoffRetries": "[parameters('cloudProviderBackoffRetries')]",
    "cloudProviderRatelimit": "[parameters('cloudProviderRatelimit')]",
    "cloudProviderRatelimitBucket": "[parameters('cloudProviderRatelimitBucket')]",
    "cloudProviderRatelimitQPS": "[parameters('cloudProviderRatelimitQPS')]",
    "cniPluginsURL": "[parameters('cniPluginsURL')]",
    "containerRuntime": "[parameters('containerRuntime')]",
    "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "customSearchDomainsScript": "H4sIAAAAAAAA/5SQQYvUQBCF7/kV5XjudHZg8CJBwbOIsBcv2UqnkrTT3RWqKq4Z5sfLkPEw6GUv3dTj4z3ee//O97H4HnWulAzc70p5lUDgeTGPl1XIBy6GsZCoX4R/RY1cuh2rda4qXQcGCjPDAWAo6pRQwgwf9/8LZ4zlK2ZqD9C24MmCL2SvLGcfi5GMGEjrwZ8aFxKvg4slWh3GqdJNjXKw1AmpoRgcGzjBUwN/77tRLFMlZLKFPHRx7EaMaRW6kSd4OjaAi7np1nCDWNQwJRDClAdQ1f1xxpwUFHOPLnDOXPbjUVo2m7kc6w93OcVeYcFwxonO0ap9iYfy329J31D1lWVoD3Dds+EnxwLuGf6Fn5Wk/fTyH6/7kFcwAY/u4sF/dj/8C7wF/hMAAP//z1uUc/gBAAA=",
    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
    "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
    "dockerEngineVersion": "[parameters('dockerEngineVersion')]",
    "etcdCaFilepath": "/etc/kubernetes/certs/ca.crt",
    "etcdClientCertFilepath": "/etc/kubernetes/certs/etcdclient.crt",
    "etcdClientCertificate": "[parameters('etcdClientCertificate')]",
    "etcdClientKeyFilepath": "/etc/kubernetes/certs/etcdclient.key",
    "etcdClientPrivateKey": "[parameters('etcdClientPrivateKey')]",
    "etcdDiskSizeGB": "[parameters('etcdDiskSizeGB')]",
    "etcdDownloadURLBase": "[parameters('etcdDownloadURLBase')]",
    "etcdPeerCertFilepath": [
      "/etc/kubernetes/certs/etcdpeer0.crt",
      "/etc/kubernetes/certs/etcdpeer1.crt",
      "/etc/kubernetes/certs/etcdpeer2.crt",
      "/etc/kubernetes/certs/etcdpeer3.crt",
      "/etc/kubernetes/certs/etcdpeer4.crt"
    ],
    "etcdPeerCertificates": [
      "[parameters('etcdPeerCertificate0')]"
    ],
    "etcdPeerKeyFilepath": [
      "/etc/kubernetes/certs/etcdpeer0.key",
      "/etc/kubernetes/certs/etcdpeer1.key",
      "/etc/kubernetes/certs/etcdpeer2.key",
      "/etc/kubernetes/certs/etcdpeer3.key",
      "/etc/kubernetes/certs/etcdpeer4.key"
    ],
    "etcdPeerPrivateKeys": [
      "[parameters('etcdPeerPrivateKey0')]"
    ],
    "etcdServerCertFilepath": "/etc/kubernetes/certs/etcdserver.crt",
    "etcdServerCertificate": "[parameters('etcdServerCertificate')]",
    "etcdServerKeyFilepath": "/etc/kubernetes/certs/etcdserver.key",
    "etcdServerPrivateKey": "[parameters('etcdServerPrivateKey')]",
    "etcdVersion": "[parameters('etcdVersion')]",
    "fqdnEndpointSuffix": "[parameters('fqdnEndpointSuffix')]",
    "gcHighThreshold": "[parameters('gcHighThreshold')]",
    "gcLowThreshold": "[parameters('gcLowThreshold')]",
    "generateProxyCertsScript": "H4sIAAAAAAAA/5RW/2+jxhP9nb9izrbOiXQEcC7ffPLnI4tQXZQ0STGVGrUVWsPYbA27ZHedxL3L/14tNgQc4179k5md9+btm2FE94M1pcyaEpkYhuRLESFYPFcW+Xsp0Io4U4QyFNLKBX+iknIWrtOONOLev/vtIXTH4bX3MOr0vtWfhyNLZbnGvazMKKXIlBmRowWuXjsl0A9qKD9ogURCvUFurrzbYKteFdtB0Cy4znQn/ju0O/F3oSMp3qEbqqvYTnSh3Avcy9D3fvnVmwRfvfGl51ewsWbadz4crRkjFEpaAh+XKFWCJEbx5pA5oymWhTa6vLXKrVCTrmk0CrWDaON0M7KHZoGrkuX6fBJWE+H6QfjT1Y13Pw6+asLWw+HIQhVZi+UUBUOF0mpUKcfhDX/tPbQw10/20m6GpKapXe2PSt3oNPAl50KBNtANbkLv9vL+7uo2mJSuNoLDUaJULoeW5QzOjuwj+8gZDo7PLl472zzuuJBRZ9mE2lRV1m0xlS7VqcpYGxeqKG68X9vqvI1NDX1l8AdYG0r98e1lQdY7yBYKs/zQMLowR4aCKATBuQJ3bPAcmZSpPhCSgMmXCnr1lQQD+/N5lSbwEUyGz2C+nNgXYMZkJcE5H5yCHuItZIPMD8CUy+lf0Lfc21HRbbeQ7Y77dWGaXN9sr7JqebWpq4t5S97B4U78ui4ynwucE8WFdTeSK6kwG2ZEKhSyX5VZX70oVtz/7NgGk7JdzO64YYA73uGSRBVKFJSkYA92avQDw3gWVGFY9DxUPIypXBwcwjcDAKCYAaWtUtDbtxnhf9BrXSItVNVaaILre2IvUk/wVt3tol3wMeNPCM8JVShzEiHkJI4pmwNRMMU5ZUw/8Bk4UkFKGRZAiTGYFPqOtP6QltXfc7s2AXvvFCUZj+HUtluzXnd2JnymKgkFKrGqmjTjAihQBg4M4Bg+wwmcwhmcwwU4NjgOOIMvEPMiV/920FZnv0Pv/2DiI9gAf8LHjzAVSBbw/TvIFDGHkyIz5gy1wC5MUx4tYMkUTYGkadEroBIEknhlFDqjLA7pLJwRmi4FgmPbcKKFlW2N0qV+DcwESaoSows/kwWuiRa4kp+g7BekSIp/tWZOMSJLuUl/5qyvgEQR5goIPJEUVFK2WYK2Dgj0zT4cJKs8QXb4waCzSki2+JcZ70DvICIKah9Jr4edL6ASZI1JrZjeRvwdtloer4edfeBiylvQawHrga21Z//cGF24mmnNRcV1wYhnGWEx6CZh/GltW4aEySJR7xaSFj0FfKFSSQNTif+18Iwa/wQAAP//gHPm/+MKAAA=",
    "generatorCode": "[parameters('generatorCode')]",
    "kubeClusterCidr": "[parameters('kubeClusterCidr')]",
    "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
    "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
    "kubeDNSServiceIP": "[parameters('kubeDNSServiceIP')]",
    "kubeServiceCidr": "[parameters('kubeServiceCidr')]",
    "kubeconfigServer": "[concat('https://', variables('masterFqdnPrefix'), '.', variables('location'), '.', variables('fqdnEndpointSuffix'))]",
    "kubernetesACIConnectorCPULimit": "[parameters('kubernetesACIConnectorCPULimit')]",
    "kubernetesACIConnectorCPURequests": "[parameters('kubernetesACIConnectorCPURequests')]",
    "kubernetesACIConnectorEnabled": "[parameters('kubernetesACIConnectorEnabled')]",
    "kubernetesACIConnectorMemoryLimit": "[parameters('kubernetesACIConnectorMemoryLimit')]",
    "kubernetesACIConnectorMemoryRequests": "[parameters('kubernetesACIConnectorMemoryRequests')]",
    "kubernetesACIConnectorNodeName": "[parameters('kubernetesACIConnectorNodeName')]",
    "kubernetesACIConnectorOS": "[parameters('kubernetesACIConnectorOS')]",
    "kubernetesACIConnectorRegion": "[parameters('kubernetesACIConnectorRegion')]",
    "kubernetesACIConnectorSpec": "[parameters('kubernetesACIConnectorSpec')]",
    "kubernetesACIConnectorTaint": "[parameters('kubernetesACIConnectorTaint')]",
    "kubernetesAPIServerIP": "[parameters('firstConsecutiveStaticIP')]",
    "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
    "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
    "kubernetesCcmImageSpec": "[parameters('kubernetesCcmImageSpec')]",
    "kubernetesClusterAutoscalerAzureCloud": "[parameters('kubernetesClusterAutoscalerAzureCloud')]",
    "kubernetesClusterAutoscalerCPULimit": "[parameters('kubernetesClusterAutoscalerCPULimit')]",
    "kubernetesClusterAutoscalerCPURequests": "[parameters('kubernetesClusterAutoscalerCPURequests')]",
    "kubernetesClusterAutoscalerEnabled": "[parameters('kubernetesClusterAutoscalerEnabled')]",
    "kubernetesClusterAutoscalerMaxNodes": "[parameters('kubernetesClusterAutoscalerMaxNodes')]",
    "kubernetesClusterAutoscalerMemoryLimit": "[parameters('kubernetesClusterAutoscalerMemoryLimit')]",
    "kubernetesClusterAutoscalerMemoryRequests": "[parameters('kubernetesClusterAutoscalerMemoryRequests')]",
    "kubernetesClusterAutoscalerMinNodes": "[parameters('kubernetesClusterAutoscalerMinNodes')]",
    "kubernetesClusterAutoscalerSpec": "[parameters('kubernetesClusterAutoscalerSpec')]",
    "kubernetesClusterAutoscalerUseManagedIdentity": "[parameters('kubernetesClusterAutoscalerUseManagedIdentity')]",
    "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
    "kubernetesDashboardCPULimit": "[parameters('kubernetesDashboardCPULimit')]",
    "kubernetesDashboardCPURequests": "[parameters('kubernetesDashboardCPURequests')]",
    "kubernetesDashboardMemoryLimit": "[parameters('kubernetesDashboardMemoryLimit')]",
    "kubernetesDashboardMemoryRequests": "[parameters('kubernetesDashboardMemoryRequests')]",
    "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
    "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
    "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
    "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
    "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
    "kubernetesKubeletClusterDomain": "[parameters('kubernetesKubeletClusterDomain')]",
    "kubernetesMetricsServerSpec": "[parameters('kubernetesMetricsServerSpec')]",
    "kubernetesNVIDIADevicePluginSpec": "[parameters('kubernetesNVIDIADevicePluginSpec')]",
    "kubernetesNonMasqueradeCidr": "[parameters('kubernetesNonMasqueradeCidr')]",
    "kubernetesOMSAgentCPULimit": "[parameters('kubernetesOMSAgentCPULimit')]",
    "kubernetesOMSAgentCPURequests": "[parameters('kubernetesOMSAgentCPURequests')]",
    "kubernetesOMSAgentMemoryLimit": "[parameters('kubernetesOMSAgentMemoryLimit')]",
    "kubernetesOMSAgentMemoryRequests": "[parameters('kubernetesOMSAgentMemoryRequests')]",
    "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
    "kubernetesReschedulerCPULimit": "[parameters('kubernetesReschedulerCPULimit')]",
    "kubernetesReschedulerCPURequests": "[parameters('kubernetesReschedulerCPURequests')]",
    "kubernetesReschedulerMemoryLimit": "[parameters('kubernetesReschedulerMemoryLimit')]",
    "kubernetesReschedulerMemoryRequests": "[parameters('kubernetesReschedulerMemoryRequests')]",
    "kubernetesReschedulerSpec": "[parameters('kubernetesReschedulerSpec')]",
    "kubernetesTillerCPULimit": "[parameters('kubernetesTillerCPULimit')]",
    "kubernetesTillerCPURequests": "[parameters('kubernetesTillerCPURequests')]",
    "kubernetesTillerMaxHistory": "[parameters('kubernetesTillerMaxHistory')]",
    "kubernetesTillerMemoryLimit": "[parameters('kubernetesTillerMemoryLimit')]",
    "kubernetesTillerMemoryRequests": "[parameters('kubernetesTillerMemoryRequests')]",
    "kubernetesTillerSpec": "[parameters('kubernetesTillerSpec')]",
    "labelResourceGroup": "[if(or(or(endsWith(variables('truncatedResourceGroup'), '-'), endsWith(variables('truncatedResourceGroup'), '_')), endsWith(variables('truncatedResourceGroup'), '.')), concat(take(variables('truncatedResourceGroup'), 62), 'z'), variables('truncatedResourceGroup'))]",
    "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
    "locations": [
      "[resourceGroup().location]",
      "[parameters('location')]"
    ],
    "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
    "masterCount": 1,
    "masterEtcdClientPort": 2379,
    "masterEtcdClientURLs": [
      "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
    ],
    "masterEtcdClusterStates": [
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
    ],
    "masterEtcdPeerURLs": [
      "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
    ],
    "masterEtcdServerPort": 2380,
    "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterFqdnPrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterOffset": "[parameters('masterOffset')]",
    "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
    "masterPrivateIpAddrs": [
      "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
    ],
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMNames": [
      "[concat(variables('masterVMNamePrefix'), '0')]",
      "[concat(variables('masterVMNamePrefix'), '1')]",
      "[concat(variables('masterVMNamePrefix'), '2')]",
      "[concat(variables('masterVMNamePrefix'), '3')]",
      "[concat(variables('masterVMNamePrefix'), '4')]"
    ],
    "masterVMSize": "[parameters('masterVMSize')]",
    "maxPods": "[parameters('maxPods')]",
    "maxVMsPerPool": 100,
    "mountetcdScript": "H4sIAAAAAAAA/3RT0W4TMRB891cMSd7oxUlBlVopRZUAKYI2VQlPCFU+e+9s4tjhbDdpgX9HdtL2EHAvJ+94Z3Zn18MXvDaO1yJoNsSlTy4a18IEKO8ImjqCcSGSUPANKEqFmqRIgfK5Ti10jJtwxnmd2jC2IjmpN0KNHUUurU+qMs5E/rJOLZ+enB5PTl+xIRZOEqKmwmACGrMjdYSONlY8ImT9FlsTdTkWLmQuSC1cS+Hxdo4+VdGaqFM9ln7NLx5SR1zIUJFrjSO+Sdbyk5PpmAWKqHbs7fzThxlXdMeDkuz64mY5X84XV7PRj4z8mrLLxeer5fVifrWc8TvRcWtqnj1QJqxYUnQn1BqBYrTE1itlOlQbjJ6z2Do7ip9oO/oTMA2+YPQGFX3HBF9Z1OQYAJDUHoMskH0RtiOh7lF4SA32V3YmYsIaw4ZojLXINfEmRFGzIjR47Gk66GNPmo7+pTl6MgD7r1fvISJS9PmvqBHJxnDkfCOMPaCTw/94gPPzvnCpVGqSK5gGG9FFE413uZEQA7MBz9r/r3LYy1SeApyPe4oC85A3ObTFuqpytMUUozzIHrxeNWFMu/i6p4jqY1ns233me1TvYMXD/a2JorZ0m3duNj0qoW8+dU7YQyw3tp9wf7TlRUnttw7VTWE+K+/mrw36HQAA//+38WqhfQMAAA==",
    "nameSuffix": "[parameters('nameSuffix')]",
    "networkPlugin": "[parameters('networkPlugin')]",
    "networkPolicy": "[parameters('networkPolicy')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
    "omsAgentDockerProviderVersion": "[parameters('omsAgentDockerProviderVersion')]",
    "omsAgentImage": "[parameters('omsAgentImage')]",
    "omsAgentVersion": "[parameters('omsAgentVersion')]",
    "omsAgentWorkspaceGuid": "[parameters('omsAgentWorkspaceGuid')]",
    "omsAgentWorkspaceKey": "[parameters('omsAgentWorkspaceKey')]",
    "orchestratorName": "[parameters('orchestratorName')]",
    "orchestratorNameVersionTag": "Kubernetes:1.11.0",
    "osImageName": "[parameters('osImageName')]",
    "osImageOffer": "[parameters('osImageOffer')]",
    "osImagePublisher": "[parameters('osImagePublisher')]",
    "osImageResourceGroup": "[parameters('osImageResourceGroup')]",
    "osImageSKU": "[parameters('osImageSKU')]",
    "osImageVersion": "[parameters('osImageVersion')]",
    "primaryAvailabilitySetName": "''",
    "primaryScaleSetName": "[concat(variables('orchestratorName'), '-agentpool1-',variables('nameSuffix'), '-vmss')]",
    "provisionScript": "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",
    "provisionScriptParametersCommon": "[concat('ADMINUSER=',variables('username'),' DOCKER_ENGINE_VERSION=',variables('dockerEngineVersion'),' DOCKER_REPO=',variables('dockerEngineDownloadRepo'),' TENANT_ID=',variables('tenantID'),' HYPERKUBE_URL=',variables('kubernetesHyperkubeSpec'),' APISERVER_PUBLIC_KEY=',variables('apiserverCertificate'),' SUBSCRIPTION_ID=',variables('subscriptionId'),' RESOURCE_GROUP=',variables('resourceGroup'),' LOCATION=',variables('location'),' VM_TYPE=',variables('vmType'),' SUBNET=',variables('agentSubnetName'),' NETWORK_SECURITY_GROUP=',variables('nsgName'),' VIRTUAL_NETWORK=',variables('agentVirtualNetworkName'),' VIRTUAL_NETWORK_RESOURCE_GROUP=',variables('virtualNetworkResourceGroupName'),' ROUTE_TABLE=',variables('routeTableName'),' PRIMARY_AVAILABILITY_SET=',variables('primaryAvailabilitySetName'),' PRIMARY_SCALE_SET=',variables('primaryScaleSetName'),' SERVICE_PRINCIPAL_CLIENT_ID=',variables('servicePrincipalClientId'),' SERVICE_PRINCIPAL_CLIENT_SECRET=',variables('singleQuote'),variables('servicePrincipalClientSecret'),variables('singleQuote'),' KUBELET_PRIVATE_KEY=',variables('clientPrivateKey'),' TARGET_ENVIRONMENT=',variables('targetEnvironment'),' NETWORK_PLUGIN=',variables('networkPlugin'),' FQDNSuffix=',variables('fqdnEndpointSuffix'),' VNET_CNI_PLUGINS_URL=',variables('vnetCniLinuxPluginsURL'),' CNI_PLUGINS_URL=',variables('cniPluginsURL'),' CLOUDPROVIDER_BACKOFF=',variables('cloudProviderBackoff'),' CLOUDPROVIDER_BACKOFF_RETRIES=',variables('cloudProviderBackoffRetries'),' CLOUDPROVIDER_BACKOFF_EXPONENT=',variables('cloudProviderBackoffExponent'),' CLOUDPROVIDER_BACKOFF_DURATION=',variables('cloudProviderBackoffDuration'),' CLOUDPROVIDER_BACKOFF_JITTER=',variables('cloudProviderBackoffJitter'),' CLOUDPROVIDER_RATELIMIT=',variables('cloudProviderRatelimit'),' CLOUDPROVIDER_RATELIMIT_QPS=',variables('cloudProviderRatelimitQPS'),' CLOUDPROVIDER_RATELIMIT_BUCKET=',variables('cloudProviderRatelimitBucket'),' USE_MANAGED_IDENTITY_EXTENSION=',variables('useManagedIdentityExtension'),' USE_INSTANCE_METADATA=',variables('useInstanceMetadata'),' CONTAINER_RUNTIME=',variables('containerRuntime'),' KUBECONFIG_SERVER=',variables('kubeconfigServer'))]",
    "provisionScriptParametersMaster": "[concat('MASTER_VM_NAME=',variables('masterVMNames')[variables('masterOffset')],' ETCD_PEER_URL=',variables('masterEtcdPeerURLs')[variables('masterOffset')],' ETCD_CLIENT_URL=',variables('masterEtcdClientURLs')[variables('masterOffset')],' MASTER_NODE=true CLUSTER_AUTOSCALER_ADDON=',variables('kubernetesClusterAutoscalerEnabled'),' ACI_CONNECTOR_ADDON=',variables('kubernetesACIConnectorEnabled'),' APISERVER_PRIVATE_KEY=',variables('apiServerPrivateKey'),' CA_CERTIFICATE=',variables('caCertificate'),' CA_PRIVATE_KEY=',variables('caPrivateKey'),' MASTER_FQDN=',variables('masterFqdnPrefix'),' KUBECONFIG_CERTIFICATE=',variables('kubeConfigCertificate'),' KUBECONFIG_KEY=',variables('kubeConfigPrivateKey'),' ETCD_SERVER_CERTIFICATE=',variables('etcdServerCertificate'),' ETCD_CLIENT_CERTIFICATE=',variables('etcdClientCertificate'),' ETCD_SERVER_PRIVATE_KEY=',variables('etcdServerPrivateKey'),' ETCD_CLIENT_PRIVATE_KEY=',variables('etcdClientPrivateKey'),' ETCD_PEER_CERTIFICATES=',string(variables('etcdPeerCertificates')),' ETCD_PEER_PRIVATE_KEYS=',string(variables('etcdPeerPrivateKeys')))]",
    "provisionSource": "H4sIAAAAAAAA/9xVTW/aQBC951e80lUEkTZAqHooos2FW2899JBQa2OPYRXb6+yO26Yh/73yYhsCbgsoUqJyWrNvPva9+Xj7pn+js75bnJxYYnsfplGg4yBWOiksdXt4OAGA8k6Tm4jhGD+U5sAlRPlEXIzBOiVT8ESMxnALHTNOT7cO3kVsLDR0BtF1dIchROW0N0ZkPKT8Ve4gmsPD5WNzewXxCZLuMABmpf8bS+oWyyWuG4yOS5j2sDoGZmPwgrIGVP4oXBhMf1JYMEW47ojL605pWEZ24ydQS1zYDMPmT0ocPUF4QiDW5DS3sfbHyGQri3+EfWwTIshM4Fix+78VeS6aNzicEwes7I1KkoY7Vjb4G38ruOevsMlEvFvr1hEPG9aPtQydPxC6gd0iVVlI/hV7SBnteEI3YhxJai3s+wHCwiaQsfvyGcIfzW6Gh+jgAbGxQayTvcZJicsVLyZidEiRekZkDFHbt1LhqdzO9IUqVOXsi7PII8W71AwH/rNErRCBKTgveNLnNO+rnOWcWK6uzk1xVEePBojy2zmkDE0W63lhCVK1wap4JcPyHjpzvFkQNXB4sUauMsPFx9MhlmAiiJ23YIm5pRxyis637tXX6ezD+Vlv2b2i6cza87Oe6Gy1RUZNW4SK21y2N0w7+JnkryQfDfYc+VsU1aN/oyYqgl9w2O9ZGs1OqN9UZQ4pMyOrD2kpNGlKWeTK6nmd66NutnVLHqjmHi9v2fXu3jGlISeBJcfK8mGaw30PM5VSvaOOXelNGogUpSaTlhKjon0MqrwhqlRen7RP5u7vAAAA//9Gx/9Q8QoAAA==",
    "readerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "registerWithTaints": "node-role.kubernetes.io/master=true:NoSchedule",
    "resourceGroup": "[resourceGroup().name]",
    "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
    "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
    "scope": "[resourceGroup().id]",
    "servicePrincipalClientId": "msi",
    "servicePrincipalClientSecret": "msi",
    "singleQuote": "'",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "sshNatPorts": [
      22,
      2201,
      2202,
      2203,
      2204
    ],
    "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "",
    "storageAccountPrefixes": [],
    "subnet": "[parameters('agentSubnet')]",
    "agentSubnet": "[parameters('agentSubnet')]",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "agentSubnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subscriptionId": "[subscription().subscriptionId]",
    "targetEnvironment": "[parameters('targetEnvironment')]",
    "tenantId": "[subscription().tenantId]",
    "truncatedResourceGroup": "[take(replace(replace(resourceGroup().name, '(', '-'), ')', '-'), 63)]",
    "useInstanceMetadata": "true",
    "useManagedIdentityExtension": "true",
    "username": "[parameters('linuxAdminUsername')]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "agentVirtualNetworkName": "[concat(variables('orchestratorName'), '-agentvnet-', variables('nameSuffix'))]",
    "virtualNetworkResourceGroupName": "''",
    "vmType": "vmss",
    "vnetCidr": "[parameters('vnetCidr')]",
    "agentVnetCidr": "[parameters('agentVnetCidr')]",
    "vnetCniLinuxPluginsURL": "[parameters('vnetCniLinuxPluginsURL')]",
    "vnetCniWindowsPluginsURL": "[parameters('vnetCniWindowsPluginsURL')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('agentVirtualNetworkName'))]",
    "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]"
  },
  "resources": [
    {
      "apiVersion": "2014-10-01-preview",
      "name": "[guid(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('agentpool1VMNamePrefix'), 'vmidentity'))]",
      "properties": {
        "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('agentpool1VMNamePrefix')), '2017-03-30', 'Full').identity.principalId]",
        "roleDefinitionId": "[variables('readerRoleDefinitionId')]"
      },
      "type": "Microsoft.Authorization/roleAssignments"
    },
    {
      "apiVersion": "[variables('apiVersionVirtualMachineScaleSets')]",
      "identity": {
        "type": "systemAssigned"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('agentVirtualNetworkName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('agentpool1VMNamePrefix')]",
      "properties": {
        "overprovision": false,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "vmssCSE",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                  },
                  "publisher": "Microsoft.Azure.Extensions",
                  "settings": {},
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0"
                }
              },
              {
                "location": "[variables('location')]",
                "name": "[concat(variables('agentpool1VMNamePrefix'), '-computeAksLinuxBilling')]",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "publisher": "Microsoft.AKS",
                  "settings": {},
                  "type": "Compute.AKS-Engine.Linux.Billing",
                  "typeHandlerVersion": "1.0"
                }
              },
              {
                "name": "managedIdentityExtension",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {},
                  "publisher": "Microsoft.ManagedIdentity",
                  "settings": {
                    "port": 50343
                  },
                  "type": "ManagedIdentityExtensionForLinux",
                  "typeHandlerVersion": "1.0"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('agentpool1VMNamePrefix')]",
                "properties": {
                  "enableAcceleratedNetworking": "false",
                  "ipConfigurations": [
                    {
                      "name": "ipconfig1",
                      "properties": {
                        "primary": true,
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig2",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig3",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig4",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig5",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig6",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig7",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig8",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig9",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig10",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig11",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig12",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig13",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig14",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig15",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig16",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig17",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig18",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig19",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig20",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig21",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig22",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig23",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig24",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig25",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig26",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig27",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig28",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig29",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig30",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    },
                    {
                      "name": "ipconfig31",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpool1VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('username')]",
            "computerNamePrefix": "[variables('agentpool1VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n    \n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n    \n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates= --image-gc-high-threshold=85 --image-gc-low-threshold=80 --image-pull-progress-deadline=30m --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=30 --network-plugin=cni --node-status-update-frequency=10s --non-masquerade-cidr=10.240.0.0/12 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests --pod-max-pids=100 \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpool1,storageprofile=managed,storagetier=Standard_LRS,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTzU7jSBC++ylKCYfdQ8ebEO2yIB/4MUwEAhQHcQhR1LaLuJR229NVncAM8+4jJ8AQCKPxyVX9/XWpenxjSSbBCXLmqBaqbHTuUzQowXFlc2o611qK+IFYOAo9u9BUmTZhSjacP0PbMMSvnhzmQTBO0C0ow0kwRBbtJNJmqR85iO2CXGVLtHJKBqMQJQtzvNfeyKtS4rMMmeMHkkS0eI66/d0gfsAsabSuHUYr51RzAWFVS6i/eYdhVlnRZNHxi1SHiy28cp6TA1VDuNAuNJS+Ov8JNrP0WRaVQYvuYQw7f5WVtwJPMHNYw13rvdNdC55gmYEyf4MyCP/ABA5ACrSwtl3RlUrJ5h9ifmwcwD21tqV/lin1HBUX2uFHtaANo4IYiEFDrZ2QNrCs3Fy7ytscpAJpzn3N4lCX0OyGsyjYcNjjftAGKERq3g/DGUnh005WlSv9Ne7t74rCYb/7f/ff9qrIqrLZB7Xb7fV7e//tdt9dhJub8CNnYkAtwaJ0qF70O5LVU4fiCLkX7W2S1JqFqejUIIMSsLqZhCGWrVCqfw/9ZO3hLoDnTym0jYRidAt0Gye2ylEZnaLhqLXz/fzmKL6IR9PLq5N4enF4FF8kP1obhEXU26wr40tUtfEzsiont346bwa7RqwB/Ia782J2fHV5Ojj7VV9dj5JtuGF8NkhG8XCVbkv7djD6Mh0dDi5HSRCMB5ZFGzMJbrUVzI8eo9IbIeUZXUe0m6EEPwMAAP//egq4kGEEAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n    # SNAT outbound traffic from pods to destinations outside of VNET.\n    iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d ',variables('vnetCidr'),' -j MASQUERADE\n    sed -i \"s|<azureCNINetworkMonitorImage>|',variables('AzureCNINetworkMonitorImageURL'),'|g\" \"/etc/kubernetes/addons/azure-cni-networkmonitor.yaml\"\n\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- timeout 10 apt-mark hold walinuxagent\n- timeout 10 apt-mark unhold walinuxagent\n\n- mkdir -p /var/log/azure && touch /var/log/azure/cloud-init.complete\n\n'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('agentpool1osImageOffer')]",
              "publisher": "[variables('agentpool1osImagePublisher')]",
              "sku": "[variables('agentpool1osImageSKU')]",
              "version": "[variables('agentpool1osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpool1Count')]",
        "name": "[variables('agentpool1VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpool1VMNamePrefix'))]",
        "orchestrator": "[variables('orchestratorNameVersionTag')]",
        "poolName": "agentpool1",
        "resourceNameSuffix": "[variables('nameSuffix')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentVirtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('agentVnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('agentSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentSubnet')]"
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2016-06-01",
          "type": "virtualNetworkPeerings",
          "name": "vnetpeering",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Network/virtualNetworks/', variables('agentVirtualNetworkName'))]"
          ],
          "properties": {
            "allowVirtualNetworkAccess": "true",
            "allowForwardedTraffic": "true",
            "allowGatewayTransit": "false",
            "useRemoteGateways": "false",
            "remoteVirtualNetwork": {
              "id": "[concat('/subscriptions/8ecadfc9-d1a3-4ea4-b844-0d9f87e4d7c8/resourceGroups/masters1/providers/Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]"
            }
          }
        }
      ],
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443-443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    }
  ],
  "outputs": {
    "primaryAvailabilitySetName": {
      "type": "string",
      "value": "[variables('primaryAvailabilitySetName')]"
    },
    "resourceGroup": {
      "type": "string",
      "value": "[variables('resourceGroup')]"
    },
    "routeTableName": {
      "type": "string",
      "value": "[variables('routeTableName')]"
    },
    "securityGroupName": {
      "type": "string",
      "value": "[variables('nsgName')]"
    },
    "agentSubnetName": {
      "type": "string",
      "value": "[variables('agentSubnetName')]"
    },
    "agentVirtualNetworkName": {
      "type": "string",
      "value": "[variables('agentVirtualNetworkName')]"
    },
    "vnetResourceGroup": {
      "type": "string",
      "value": "[variables('virtualNetworkResourceGroupName')]"
    }
  }
}
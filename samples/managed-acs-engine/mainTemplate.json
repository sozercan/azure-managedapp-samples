{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "AzureCNINetworkMonitorImageURL": {
        "defaultValue": "",
        "metadata": {
          "description": "Azure CNI networkmonitor Image URL"
        },
        "type": "string"
      },
      "acsengineVersion": {
        "metadata": {
          "description": "Contains details of the acs-engine version which was used to provision the cluster"
        },
        "type": "string"
      },
      "agentpool1Count": {
        "allowedValues": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100
        ],
        "defaultValue": 1,
        "metadata": {
          "description": "The number of agents for the cluster.  This value can be from 1 to 100"
        },
        "type": "int"
      },
      "agentpool1Subnet": {
        "defaultValue": "10.240.0.0/12",
        "metadata": {
          "description": "Sets the subnet of agent pool 'agentpool1'."
        },
        "type": "string"
      },
      "agentpool1VMSize": {
        "allowedValues": [
          "Standard_A0",
          "Standard_A1",
          "Standard_A10",
          "Standard_A11",
          "Standard_A1_v2",
          "Standard_A2",
          "Standard_A2_v2",
          "Standard_A2m_v2",
          "Standard_A3",
          "Standard_A4",
          "Standard_A4_v2",
          "Standard_A4m_v2",
          "Standard_A5",
          "Standard_A6",
          "Standard_A7",
          "Standard_A8",
          "Standard_A8_v2",
          "Standard_A8m_v2",
          "Standard_A9",
          "Standard_B1ms",
          "Standard_B1s",
          "Standard_B2ms",
          "Standard_B2s",
          "Standard_B4ms",
          "Standard_B8ms",
          "Standard_D1",
          "Standard_D11",
          "Standard_D11_v2",
          "Standard_D11_v2_Promo",
          "Standard_D12",
          "Standard_D12_v2",
          "Standard_D12_v2_Promo",
          "Standard_D13",
          "Standard_D13_v2",
          "Standard_D13_v2_Promo",
          "Standard_D14",
          "Standard_D14_v2",
          "Standard_D14_v2_Promo",
          "Standard_D15_v2",
          "Standard_D16_v3",
          "Standard_D16s_v3",
          "Standard_D1_v2",
          "Standard_D2",
          "Standard_D2_v2",
          "Standard_D2_v2_Promo",
          "Standard_D2_v3",
          "Standard_D2s_v3",
          "Standard_D3",
          "Standard_D32_v3",
          "Standard_D32s_v3",
          "Standard_D3_v2",
          "Standard_D3_v2_Promo",
          "Standard_D4",
          "Standard_D4_v2",
          "Standard_D4_v2_Promo",
          "Standard_D4_v3",
          "Standard_D4s_v3",
          "Standard_D5_v2",
          "Standard_D5_v2_Promo",
          "Standard_D64_v3",
          "Standard_D64s_v3",
          "Standard_D8_v3",
          "Standard_D8s_v3",
          "Standard_DS1",
          "Standard_DS11",
          "Standard_DS11-1_v2",
          "Standard_DS11_v2",
          "Standard_DS11_v2_Promo",
          "Standard_DS12",
          "Standard_DS12-1_v2",
          "Standard_DS12-2_v2",
          "Standard_DS12_v2",
          "Standard_DS12_v2_Promo",
          "Standard_DS13",
          "Standard_DS13-2_v2",
          "Standard_DS13-4_v2",
          "Standard_DS13_v2",
          "Standard_DS13_v2_Promo",
          "Standard_DS14",
          "Standard_DS14-4_v2",
          "Standard_DS14-8_v2",
          "Standard_DS14_v2",
          "Standard_DS14_v2_Promo",
          "Standard_DS15_v2",
          "Standard_DS1_v2",
          "Standard_DS2",
          "Standard_DS2_v2",
          "Standard_DS2_v2_Promo",
          "Standard_DS3",
          "Standard_DS3_v2",
          "Standard_DS3_v2_Promo",
          "Standard_DS4",
          "Standard_DS4_v2",
          "Standard_DS4_v2_Promo",
          "Standard_DS5_v2",
          "Standard_DS5_v2_Promo",
          "Standard_E16-4s_v3",
          "Standard_E16-8s_v3",
          "Standard_E16_v3",
          "Standard_E16s_v3",
          "Standard_E2_v3",
          "Standard_E2s_v3",
          "Standard_E32-16s_v3",
          "Standard_E32-8s_v3",
          "Standard_E32_v3",
          "Standard_E32s_v3",
          "Standard_E4-2s_v3",
          "Standard_E4_v3",
          "Standard_E4s_v3",
          "Standard_E64-16s_v3",
          "Standard_E64-32s_v3",
          "Standard_E64_v3",
          "Standard_E64i_v3",
          "Standard_E64is_v3",
          "Standard_E64s_v3",
          "Standard_E8-2s_v3",
          "Standard_E8-4s_v3",
          "Standard_E8_v3",
          "Standard_E8s_v3",
          "Standard_F1",
          "Standard_F16",
          "Standard_F16s",
          "Standard_F16s_v2",
          "Standard_F1s",
          "Standard_F2",
          "Standard_F2s",
          "Standard_F2s_v2",
          "Standard_F32s_v2",
          "Standard_F4",
          "Standard_F4s",
          "Standard_F4s_v2",
          "Standard_F64s_v2",
          "Standard_F72s_v2",
          "Standard_F8",
          "Standard_F8s",
          "Standard_F8s_v2",
          "Standard_G1",
          "Standard_G2",
          "Standard_G3",
          "Standard_G4",
          "Standard_G5",
          "Standard_GS1",
          "Standard_GS2",
          "Standard_GS3",
          "Standard_GS4",
          "Standard_GS4-4",
          "Standard_GS4-8",
          "Standard_GS5",
          "Standard_GS5-16",
          "Standard_GS5-8",
          "Standard_H16",
          "Standard_H16m",
          "Standard_H16mr",
          "Standard_H16r",
          "Standard_H8",
          "Standard_H8m",
          "Standard_L16s",
          "Standard_L16s_v2",
          "Standard_L32s",
          "Standard_L4s",
          "Standard_L8s",
          "Standard_L8s_v2",
          "Standard_M128",
          "Standard_M128-32ms",
          "Standard_M128-64ms",
          "Standard_M128m",
          "Standard_M128ms",
          "Standard_M128s",
          "Standard_M16-4ms",
          "Standard_M16-8ms",
          "Standard_M16ms",
          "Standard_M32-16ms",
          "Standard_M32-8ms",
          "Standard_M32ls",
          "Standard_M32ms",
          "Standard_M32ts",
          "Standard_M64",
          "Standard_M64-16ms",
          "Standard_M64-32ms",
          "Standard_M64ls",
          "Standard_M64m",
          "Standard_M64ms",
          "Standard_M64s",
          "Standard_M8-2ms",
          "Standard_M8-4ms",
          "Standard_M8ms",
          "Standard_NC12",
          "Standard_NC12s_v2",
          "Standard_NC12s_v3",
          "Standard_NC24",
          "Standard_NC24r",
          "Standard_NC24rs_v2",
          "Standard_NC24rs_v3",
          "Standard_NC24s_v2",
          "Standard_NC24s_v3",
          "Standard_NC6",
          "Standard_NC6s_v2",
          "Standard_NC6s_v3",
          "Standard_ND12s",
          "Standard_ND24rs",
          "Standard_ND24s",
          "Standard_ND6s",
          "Standard_NV12",
          "Standard_NV24",
          "Standard_NV6"
        ],
        "defaultValue": "Standard_D2_v2",
        "metadata": {
          "description": "The size of the Virtual Machine."
        },
        "type": "string"
      },
      "agentpool1osImageName": {
        "defaultValue": "",
        "metadata": {
          "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
        },
        "type": "string"
      },
      "agentpool1osImageOffer": {
        "defaultValue": "UbuntuServer",
        "metadata": {
          "description": "Linux OS image type."
        },
        "type": "string"
      },
      "agentpool1osImagePublisher": {
        "defaultValue": "Canonical",
        "metadata": {
          "description": "OS image publisher."
        },
        "type": "string"
      },
      "agentpool1osImageResourceGroup": {
        "defaultValue": "",
        "metadata": {
          "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
        },
        "type": "string"
      },
      "agentpool1osImageSKU": {
        "defaultValue": "16.04-LTS",
        "metadata": {
          "description": "OS image SKU."
        },
        "type": "string"
      },
      "agentpool1osImageVersion": {
        "defaultValue": "16.04.201804050",
        "metadata": {
          "description": "OS image version."
        },
        "type": "string"
      },
      "apiServerCertificate": {
        "metadata": {
          "description": "The base 64 server certificate used on the master"
        },
        "type": "string"
      },
      "apiServerPrivateKey": {
        "metadata": {
          "description": "The base 64 server private key used on the master."
        },
        "type": "securestring"
      },
      "caCertificate": {
        "metadata": {
          "description": "The base 64 certificate authority certificate"
        },
        "type": "string"
      },
      "caPrivateKey": {
        "defaultValue": "",
        "metadata": {
          "description": "The base 64 CA private key used on the master."
        },
        "type": "securestring"
      },
      "clientCertificate": {
        "metadata": {
          "description": "The base 64 client certificate used to communicate with the master"
        },
        "type": "string"
      },
      "clientPrivateKey": {
        "metadata": {
          "description": "The base 64 client private key used to communicate with the master"
        },
        "type": "securestring"
      },
      "cloudProviderBackoff": {
        "defaultValue": "",
        "metadata": {
          "description": "Enable cloudprovider backoff?"
        },
        "type": "string"
      },
      "cloudProviderBackoffDuration": {
        "defaultValue": "",
        "metadata": {
          "description": "If backoff enabled, how long until timeout"
        },
        "type": "string"
      },
      "cloudProviderBackoffExponent": {
        "defaultValue": "",
        "metadata": {
          "description": "If backoff enabled, retry exponent"
        },
        "type": "string"
      },
      "cloudProviderBackoffJitter": {
        "defaultValue": "",
        "metadata": {
          "description": "If backoff enabled, jitter factor between retries"
        },
        "type": "string"
      },
      "cloudProviderBackoffRetries": {
        "defaultValue": "",
        "metadata": {
          "description": "If backoff enabled, how many times to retry"
        },
        "type": "string"
      },
      "cloudProviderRatelimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Enable cloudprovider rate limiting?"
        },
        "type": "string"
      },
      "cloudProviderRatelimitBucket": {
        "defaultValue": "",
        "metadata": {
          "description": "If rate limiting enabled, bucket size"
        },
        "type": "string"
      },
      "cloudProviderRatelimitQPS": {
        "defaultValue": "",
        "metadata": {
          "description": "If rate limiting enabled, target maximum QPS"
        },
        "type": "string"
      },
      "cniPluginsURL": {
        "defaultValue": "https://acs-mirror.azureedge.net/cni/cni-plugins-amd64-latest.tgz",
        "type": "string"
      },
      "containerRuntime": {
        "allowedValues": [
          "docker",
          "clear-containers",
          "kata-containers",
          "containerd"
        ],
        "defaultValue": "docker",
        "metadata": {
          "description": "The container runtime to use (docker|clear-containers|kata-containers|containerd)"
        },
        "type": "string"
      },
      "dockerBridgeCidr": {
        "defaultValue": "",
        "metadata": {
          "description": "Docker bridge network IP address and subnet"
        },
        "type": "string"
      },
      "dockerEngineDownloadRepo": {
        "defaultValue": "https://aptdocker.azureedge.net/repo",
        "metadata": {
          "description": "The docker engine download url for kubernetes."
        },
        "type": "string"
      },
      "dockerEngineVersion": {
        "allowedValues": [
          "17.05.*",
          "17.04.*",
          "17.03.*",
          "1.13.*",
          "1.12.*",
          "1.11.*"
        ],
        "defaultValue": "",
        "metadata": {
          "description": "The docker engine version to install."
        },
        "type": "string"
      },
      "etcdClientCertificate": {
        "metadata": {
          "description": "The base 64 server certificate used on the master"
        },
        "type": "string"
      },
      "etcdClientPrivateKey": {
        "metadata": {
          "description": "The base 64 server private key used on the master."
        },
        "type": "securestring"
      },
      "etcdDiskSizeGB": {
        "defaultValue": "",
        "metadata": {
          "description": "Size in GB to allocate for etcd volume"
        },
        "type": "string"
      },
      "etcdDownloadURLBase": {
        "defaultValue": "",
        "metadata": {
          "description": "etcd image base URL"
        },
        "type": "string"
      },
      "etcdEncryptionKey": {
        "metadata": {
          "description": "Encryption at rest key for etcd"
        },
        "type": "string"
      },
      "etcdPeerCertificate0": {
        "metadata": {
          "description": "The base 64 server certificates used on the master"
        },
        "type": "string"
      },
      "etcdPeerPrivateKey0": {
        "metadata": {
          "description": "The base 64 server private keys used on the master."
        },
        "type": "securestring"
      },
      "etcdServerCertificate": {
        "metadata": {
          "description": "The base 64 server certificate used on the master"
        },
        "type": "string"
      },
      "etcdServerPrivateKey": {
        "metadata": {
          "description": "The base 64 server private key used on the master."
        },
        "type": "securestring"
      },
      "etcdVersion": {
        "defaultValue": "",
        "metadata": {
          "description": "etcd version"
        },
        "type": "string"
      },
      "firstConsecutiveStaticIP": {
        "defaultValue": "10.255.255.5",
        "metadata": {
          "description": "Sets the static IP of the first master"
        },
        "type": "string"
      },
      "fqdnEndpointSuffix": {
        "defaultValue": "cloudapp.azure.com",
        "metadata": {
          "description": "Endpoint of FQDN."
        },
        "type": "string"
      },
      "gcHighThreshold": {
        "defaultValue": 85,
        "metadata": {
          "description": "High Threshold for Image Garbage collection on each node"
        },
        "type": "int"
      },
      "gcLowThreshold": {
        "defaultValue": 80,
        "metadata": {
          "description": "Low Threshold for Image Garbage collection on each node."
        },
        "type": "int"
      },
      "generatorCode": {
        "defaultValue": "",
        "metadata": {
          "description": "The generator code used to identify the generator"
        },
        "type": "string"
      },
      "kubeClusterCidr": {
        "defaultValue": "",
        "metadata": {
          "description": "Kubernetes cluster subnet"
        },
        "type": "string"
      },
      "kubeConfigCertificate": {
        "metadata": {
          "description": "The base 64 certificate used by cli to communicate with the master"
        },
        "type": "string"
      },
      "kubeConfigPrivateKey": {
        "metadata": {
          "description": "The base 64 private key used by cli to communicate with the master"
        },
        "type": "securestring"
      },
      "kubeDNSServiceIP": {
        "defaultValue": "",
        "metadata": {
          "description": "Kubernetes DNS IP"
        },
        "type": "string"
      },
      "kubeServiceCidr": {
        "defaultValue": "",
        "metadata": {
          "description": "Kubernetes service address space"
        },
        "type": "string"
      },
      "kubernetesACIConnectorCPULimit": {
        "defaultValue": "",
        "metadata": {
          "description": "ACI Connector CPU Limit"
        },
        "type": "string"
      },
      "kubernetesACIConnectorCPURequests": {
        "defaultValue": "",
        "metadata": {
          "description": "ACI Connector CPU Requests"
        },
        "type": "string"
      },
      "kubernetesACIConnectorEnabled": {
        "defaultValue": false,
        "metadata": {
          "description": "ACI Connector Status"
        },
        "type": "bool"
      },
      "kubernetesACIConnectorMemoryLimit": {
        "defaultValue": "",
        "metadata": {
          "description": "ACI Connector Memory Limit"
        },
        "type": "string"
      },
      "kubernetesACIConnectorMemoryRequests": {
        "defaultValue": "",
        "metadata": {
          "description": "ACI Connector Memory Requests"
        },
        "type": "string"
      },
      "kubernetesACIConnectorNodeName": {
        "defaultValue": "",
        "metadata": {
          "description": "Node name for ACI Connector."
        },
        "type": "string"
      },
      "kubernetesACIConnectorOS": {
        "defaultValue": "",
        "metadata": {
          "description": "OS for ACI Connector."
        },
        "type": "string"
      },
      "kubernetesACIConnectorRegion": {
        "defaultValue": "",
        "metadata": {
          "description": "Region for ACI Connector."
        },
        "type": "string"
      },
      "kubernetesACIConnectorSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for ACI Connector."
        },
        "type": "string"
      },
      "kubernetesACIConnectorTaint": {
        "defaultValue": "",
        "metadata": {
          "description": "Taint for ACI Connector."
        },
        "type": "string"
      },
      "kubernetesAddonManagerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for hyperkube."
        },
        "type": "string"
      },
      "kubernetesAddonResizerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for addon-resizer."
        },
        "type": "string"
      },
      "kubernetesCcmImageSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for cloud-controller-manager."
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerAzureCloud": {
        "defaultValue": "",
        "metadata": {
          "description": "Name of the Azure cloud for the cluster autoscaler."
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerCPULimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Cluster autoscaler cpu limit"
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerCPURequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Cluster autoscaler cpu requests"
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerEnabled": {
        "defaultValue": false,
        "metadata": {
          "description": "Cluster autoscaler status"
        },
        "type": "bool"
      },
      "kubernetesClusterAutoscalerMaxNodes": {
        "defaultValue": "",
        "metadata": {
          "description": "Cluster autoscaler max nodes"
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerMemoryLimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Cluster autoscaler memory limit"
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerMemoryRequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Cluster autoscaler memory requests"
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerMinNodes": {
        "defaultValue": "",
        "metadata": {
          "description": "Cluster autoscaler min nodes"
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for the cluster autoscaler."
        },
        "type": "string"
      },
      "kubernetesClusterAutoscalerUseManagedIdentity": {
        "defaultValue": "",
        "metadata": {
          "description": "Managed identity for the cluster autoscaler addon"
        },
        "type": "string"
      },
      "kubernetesDNSMasqSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for kube-dnsmasq-amd64."
        },
        "type": "string"
      },
      "kubernetesDashboardCPULimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Dashboard CPU Limit."
        },
        "type": "string"
      },
      "kubernetesDashboardCPURequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Dashboard CPU Requests."
        },
        "type": "string"
      },
      "kubernetesDashboardMemoryLimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Dashboard Memory Limit."
        },
        "type": "string"
      },
      "kubernetesDashboardMemoryRequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Dashboard Memory Requests."
        },
        "type": "string"
      },
      "kubernetesDashboardSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for kubernetes-dashboard-amd64."
        },
        "type": "string"
      },
      "kubernetesExecHealthzSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for exechealthz-amd64."
        },
        "type": "string"
      },
      "kubernetesHeapsterSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for heapster."
        },
        "type": "string"
      },
      "kubernetesHyperkubeSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for hyperkube."
        },
        "type": "string"
      },
      "kubernetesKubeDNSSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for kubedns-amd64."
        },
        "type": "string"
      },
      "kubernetesKubeletClusterDomain": {
        "metadata": {
          "description": "--cluster-domain Kubelet config"
        },
        "type": "string"
      },
      "kubernetesMetricsServerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for Metrics Server."
        },
        "type": "string"
      },
      "kubernetesNVIDIADevicePluginSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for NVIDIA Device Plugin."
        },
        "type": "string"
      },
      "kubernetesNonMasqueradeCidr": {
        "metadata": {
          "description": "kubernetesNonMasqueradeCidr cluster subnet"
        },
        "type": "string"
      },
      "kubernetesOMSAgentCPULimit": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS Agent CPU limit resource limit"
        },
        "type": "string"
      },
      "kubernetesOMSAgentCPURequests": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS Agent CPU requests resource limit"
        },
        "type": "string"
      },
      "kubernetesOMSAgentMemoryLimit": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS Agent memory limit resource limit"
        },
        "type": "string"
      },
      "kubernetesOMSAgentMemoryRequests": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS Agent memory requests resource limit"
        },
        "type": "string"
      },
      "kubernetesPodInfraContainerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for pod infra."
        },
        "type": "string"
      },
      "kubernetesReschedulerCPULimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Rescheduler CPU Limit."
        },
        "type": "string"
      },
      "kubernetesReschedulerCPURequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Rescheduler CPU Requests."
        },
        "type": "string"
      },
      "kubernetesReschedulerMemoryLimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Rescheduler Memory Limit."
        },
        "type": "string"
      },
      "kubernetesReschedulerMemoryRequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Rescheduler Memory Requests."
        },
        "type": "string"
      },
      "kubernetesReschedulerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for rescheduler."
        },
        "type": "string"
      },
      "kubernetesTillerCPULimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Helm Tiller CPU Limit."
        },
        "type": "string"
      },
      "kubernetesTillerCPURequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Helm Tiller CPU Requests."
        },
        "type": "string"
      },
      "kubernetesTillerMaxHistory": {
        "defaultValue": "",
        "metadata": {
          "description": "Helm Tiller Max History to Store. '0' for no limit."
        },
        "type": "string"
      },
      "kubernetesTillerMemoryLimit": {
        "defaultValue": "",
        "metadata": {
          "description": "Helm Tiller Memory Limit."
        },
        "type": "string"
      },
      "kubernetesTillerMemoryRequests": {
        "defaultValue": "",
        "metadata": {
          "description": "Helm Tiller Memory Requests."
        },
        "type": "string"
      },
      "kubernetesTillerSpec": {
        "defaultValue": "",
        "metadata": {
          "description": "The container spec for Helm Tiller."
        },
        "type": "string"
      },
      "linuxAdminUsername": {
        "metadata": {
          "description": "User name for the Linux Virtual Machines (SSH or Password)."
        },
        "type": "string"
      },
      "location": {
        "defaultValue": "",
        "metadata": {
          "description": "Sets the location for all resources in the cluster"
        },
        "type": "string"
      },
      "masterEndpointDNSNamePrefix": {
        "metadata": {
          "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
        },
        "type": "string"
      },
      "masterOffset": {
        "allowedValues": [
          0,
          1,
          2,
          3,
          4
        ],
        "defaultValue": 0,
        "metadata": {
          "description": "The offset into the master pool where to start creating master VMs.  This value can be from 0 to 4, but must be less than masterCount."
        },
        "type": "int"
      },
      "masterSubnet": {
        "defaultValue": "10.240.0.0/12",
        "metadata": {
          "description": "Sets the subnet of the master node(s)."
        },
        "type": "string"
      },
      "masterVMSize": {
        "allowedValues": [
          "Standard_A0",
          "Standard_A1",
          "Standard_A10",
          "Standard_A11",
          "Standard_A1_v2",
          "Standard_A2",
          "Standard_A2_v2",
          "Standard_A2m_v2",
          "Standard_A3",
          "Standard_A4",
          "Standard_A4_v2",
          "Standard_A4m_v2",
          "Standard_A5",
          "Standard_A6",
          "Standard_A7",
          "Standard_A8",
          "Standard_A8_v2",
          "Standard_A8m_v2",
          "Standard_A9",
          "Standard_B1ms",
          "Standard_B1s",
          "Standard_B2ms",
          "Standard_B2s",
          "Standard_B4ms",
          "Standard_B8ms",
          "Standard_D1",
          "Standard_D11",
          "Standard_D11_v2",
          "Standard_D11_v2_Promo",
          "Standard_D12",
          "Standard_D12_v2",
          "Standard_D12_v2_Promo",
          "Standard_D13",
          "Standard_D13_v2",
          "Standard_D13_v2_Promo",
          "Standard_D14",
          "Standard_D14_v2",
          "Standard_D14_v2_Promo",
          "Standard_D15_v2",
          "Standard_D16_v3",
          "Standard_D16s_v3",
          "Standard_D1_v2",
          "Standard_D2",
          "Standard_D2_v2",
          "Standard_D2_v2_Promo",
          "Standard_D2_v3",
          "Standard_D2s_v3",
          "Standard_D3",
          "Standard_D32_v3",
          "Standard_D32s_v3",
          "Standard_D3_v2",
          "Standard_D3_v2_Promo",
          "Standard_D4",
          "Standard_D4_v2",
          "Standard_D4_v2_Promo",
          "Standard_D4_v3",
          "Standard_D4s_v3",
          "Standard_D5_v2",
          "Standard_D5_v2_Promo",
          "Standard_D64_v3",
          "Standard_D64s_v3",
          "Standard_D8_v3",
          "Standard_D8s_v3",
          "Standard_DS1",
          "Standard_DS11",
          "Standard_DS11-1_v2",
          "Standard_DS11_v2",
          "Standard_DS11_v2_Promo",
          "Standard_DS12",
          "Standard_DS12-1_v2",
          "Standard_DS12-2_v2",
          "Standard_DS12_v2",
          "Standard_DS12_v2_Promo",
          "Standard_DS13",
          "Standard_DS13-2_v2",
          "Standard_DS13-4_v2",
          "Standard_DS13_v2",
          "Standard_DS13_v2_Promo",
          "Standard_DS14",
          "Standard_DS14-4_v2",
          "Standard_DS14-8_v2",
          "Standard_DS14_v2",
          "Standard_DS14_v2_Promo",
          "Standard_DS15_v2",
          "Standard_DS1_v2",
          "Standard_DS2",
          "Standard_DS2_v2",
          "Standard_DS2_v2_Promo",
          "Standard_DS3",
          "Standard_DS3_v2",
          "Standard_DS3_v2_Promo",
          "Standard_DS4",
          "Standard_DS4_v2",
          "Standard_DS4_v2_Promo",
          "Standard_DS5_v2",
          "Standard_DS5_v2_Promo",
          "Standard_E16-4s_v3",
          "Standard_E16-8s_v3",
          "Standard_E16_v3",
          "Standard_E16s_v3",
          "Standard_E2_v3",
          "Standard_E2s_v3",
          "Standard_E32-16s_v3",
          "Standard_E32-8s_v3",
          "Standard_E32_v3",
          "Standard_E32s_v3",
          "Standard_E4-2s_v3",
          "Standard_E4_v3",
          "Standard_E4s_v3",
          "Standard_E64-16s_v3",
          "Standard_E64-32s_v3",
          "Standard_E64_v3",
          "Standard_E64i_v3",
          "Standard_E64is_v3",
          "Standard_E64s_v3",
          "Standard_E8-2s_v3",
          "Standard_E8-4s_v3",
          "Standard_E8_v3",
          "Standard_E8s_v3",
          "Standard_F1",
          "Standard_F16",
          "Standard_F16s",
          "Standard_F16s_v2",
          "Standard_F1s",
          "Standard_F2",
          "Standard_F2s",
          "Standard_F2s_v2",
          "Standard_F32s_v2",
          "Standard_F4",
          "Standard_F4s",
          "Standard_F4s_v2",
          "Standard_F64s_v2",
          "Standard_F72s_v2",
          "Standard_F8",
          "Standard_F8s",
          "Standard_F8s_v2",
          "Standard_G1",
          "Standard_G2",
          "Standard_G3",
          "Standard_G4",
          "Standard_G5",
          "Standard_GS1",
          "Standard_GS2",
          "Standard_GS3",
          "Standard_GS4",
          "Standard_GS4-4",
          "Standard_GS4-8",
          "Standard_GS5",
          "Standard_GS5-16",
          "Standard_GS5-8",
          "Standard_H16",
          "Standard_H16m",
          "Standard_H16mr",
          "Standard_H16r",
          "Standard_H8",
          "Standard_H8m",
          "Standard_L16s",
          "Standard_L16s_v2",
          "Standard_L32s",
          "Standard_L4s",
          "Standard_L8s",
          "Standard_L8s_v2",
          "Standard_M128",
          "Standard_M128-32ms",
          "Standard_M128-64ms",
          "Standard_M128m",
          "Standard_M128ms",
          "Standard_M128s",
          "Standard_M16-4ms",
          "Standard_M16-8ms",
          "Standard_M16ms",
          "Standard_M32-16ms",
          "Standard_M32-8ms",
          "Standard_M32ls",
          "Standard_M32ms",
          "Standard_M32ts",
          "Standard_M64",
          "Standard_M64-16ms",
          "Standard_M64-32ms",
          "Standard_M64ls",
          "Standard_M64m",
          "Standard_M64ms",
          "Standard_M64s",
          "Standard_M8-2ms",
          "Standard_M8-4ms",
          "Standard_M8ms",
          "Standard_NC12",
          "Standard_NC12s_v2",
          "Standard_NC12s_v3",
          "Standard_NC24",
          "Standard_NC24r",
          "Standard_NC24rs_v2",
          "Standard_NC24rs_v3",
          "Standard_NC24s_v2",
          "Standard_NC24s_v3",
          "Standard_NC6",
          "Standard_NC6s_v2",
          "Standard_NC6s_v3",
          "Standard_ND12s",
          "Standard_ND24rs",
          "Standard_ND24s",
          "Standard_ND6s",
          "Standard_NV12",
          "Standard_NV24",
          "Standard_NV6"
        ],
        "metadata": {
          "description": "The size of the Virtual Machine."
        },
        "type": "string"
      },
      "maxPods": {
        "defaultValue": 30,
        "metadata": {
          "description": "This param has been deprecated."
        },
        "type": "int"
      },
      "nameSuffix": {
        "defaultValue": "47478282",
        "metadata": {
          "description": "A string hash of the master DNS name to uniquely identify the cluster."
        },
        "type": "string"
      },
      "networkPlugin": {
        "allowedValues": [
          "kubenet",
          "azure",
          "flannel",
          "cilium"
        ],
        "defaultValue": "azure",
        "metadata": {
          "description": "The network plugin to use for Kubernetes (kubenet|azure|flannel|cilium)"
        },
        "type": "string"
      },
      "networkPolicy": {
        "allowedValues": [
          "",
          "none",
          "azure",
          "calico",
          "cilium"
        ],
        "defaultValue": "",
        "metadata": {
          "description": "The network policy enforcement to use (calico|cilium); 'none' and 'azure' here for backwards compatibility"
        },
        "type": "string"
      },
      "omsAgentDockerProviderVersion": {
        "defaultValue": "",
        "metadata": {
          "description": "Docker provider version for Container Monitoring."
        },
        "type": "string"
      },
      "omsAgentImage": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS agent image for Container Monitoring."
        },
        "type": "string"
      },
      "omsAgentVersion": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS agent version for Container Monitoring."
        },
        "type": "string"
      },
      "omsAgentWorkspaceGuid": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS workspace guid"
        },
        "type": "string"
      },
      "omsAgentWorkspaceKey": {
        "defaultValue": "",
        "metadata": {
          "description": "OMS workspace key"
        },
        "type": "string"
      },
      "orchestratorName": {
        "defaultValue": "",
        "maxLength": 3,
        "metadata": {
          "description": "The orchestrator name used to identify the orchestrator.  This must be no more than 3 digits in length, otherwise it will exceed Windows Naming"
        },
        "minLength": 3,
        "type": "string"
      },
      "osImageName": {
        "defaultValue": "",
        "metadata": {
          "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
        },
        "type": "string"
      },
      "osImageOffer": {
        "defaultValue": "UbuntuServer",
        "metadata": {
          "description": "Linux OS image type."
        },
        "type": "string"
      },
      "osImagePublisher": {
        "defaultValue": "Canonical",
        "metadata": {
          "description": "OS image publisher."
        },
        "type": "string"
      },
      "osImageResourceGroup": {
        "defaultValue": "",
        "metadata": {
          "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
        },
        "type": "string"
      },
      "osImageSKU": {
        "defaultValue": "16.04-LTS",
        "metadata": {
          "description": "OS image SKU."
        },
        "type": "string"
      },
      "osImageVersion": {
        "defaultValue": "16.04.201804050",
        "metadata": {
          "description": "OS image version."
        },
        "type": "string"
      },
      "sshRSAPublicKey": {
        "metadata": {
          "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
        },
        "type": "string"
      },
      "targetEnvironment": {
        "defaultValue": "AzurePublicCloud",
        "metadata": {
          "description": "The azure deploy environment. Currently support: AzurePublicCloud, AzureChinaCloud"
        },
        "type": "string"
      },
      "vnetCidr": {
        "defaultValue": "10.0.0.0/8",
        "metadata": {
          "description": "Cluster vnet cidr"
        },
        "type": "string"
      },
      "vnetCniLinuxPluginsURL": {
        "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-linux-amd64-latest.tgz",
        "type": "string"
      },
      "vnetCniWindowsPluginsURL": {
        "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-windows-amd64-latest.zip",
        "type": "string"
      }
    },
    "variables": {
      "AzureCNINetworkMonitorImageURL": "[parameters('AzureCNINetworkMonitorImageURL')]",
      "acsengineVersion": "[parameters('acsengineVersion')]",
      "agentpool1Count": "[parameters('agentpool1Count')]",
      "agentpool1Index": 0,
      "agentpool1SubnetName": "[variables('subnetName')]",
      "agentpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'), '-vmss')]",
      "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
      "agentpool1VnetSubnetID": "[variables('vnetSubnetID')]",
      "agentpool1osImageName": "[parameters('agentpool1osImageName')]",
      "agentpool1osImageOffer": "[parameters('agentpool1osImageOffer')]",
      "agentpool1osImagePublisher": "[parameters('agentpool1osImagePublisher')]",
      "agentpool1osImageResourceGroup": "[parameters('agentpool1osImageResourceGroup')]",
      "agentpool1osImageSKU": "[parameters('agentpool1osImageSKU')]",
      "agentpool1osImageVersion": "[parameters('agentpool1osImageVersion')]",
      "allocateNodeCidrs": false,
      "apiServerCertificate": "[parameters('apiServerCertificate')]",
      "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
      "apiVersionAcceleratedNetworking": "2018-04-01",
      "apiVersionDefault": "2016-03-30",
      "apiVersionLinkDefault": "2015-01-01",
      "apiVersionStorageManagedDisks": "2016-04-30-preview",
      "apiVersionVirtualMachineScaleSets": "2017-12-01",
      "caCertificate": "[parameters('caCertificate')]",
      "caPrivateKey": "[parameters('caPrivateKey')]",
      "clientCertificate": "[parameters('clientCertificate')]",
      "clientPrivateKey": "[parameters('clientPrivateKey')]",
      "cloudProviderBackoff": "[parameters('cloudProviderBackoff')]",
      "cloudProviderBackoffDuration": "[parameters('cloudProviderBackoffDuration')]",
      "cloudProviderBackoffExponent": "[parameters('cloudProviderBackoffExponent')]",
      "cloudProviderBackoffJitter": "[parameters('cloudProviderBackoffJitter')]",
      "cloudProviderBackoffRetries": "[parameters('cloudProviderBackoffRetries')]",
      "cloudProviderRatelimit": "[parameters('cloudProviderRatelimit')]",
      "cloudProviderRatelimitBucket": "[parameters('cloudProviderRatelimitBucket')]",
      "cloudProviderRatelimitQPS": "[parameters('cloudProviderRatelimitQPS')]",
      "cniPluginsURL": "[parameters('cniPluginsURL')]",
      "containerRuntime": "[parameters('containerRuntime')]",
      "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "customSearchDomainsScript": "H4sIAAAAAAAA/5SQQYvUQBCF7/kV5XjudHZg8CJBwbOIsBcv2UqnkrTT3RWqKq4Z5sfLkPEw6GUv3dTj4z3ee//O97H4HnWulAzc70p5lUDgeTGPl1XIBy6GsZCoX4R/RY1cuh2rda4qXQcGCjPDAWAo6pRQwgwf9/8LZ4zlK2ZqD9C24MmCL2SvLGcfi5GMGEjrwZ8aFxKvg4slWh3GqdJNjXKw1AmpoRgcGzjBUwN/77tRLFMlZLKFPHRx7EaMaRW6kSd4OjaAi7np1nCDWNQwJRDClAdQ1f1xxpwUFHOPLnDOXPbjUVo2m7kc6w93OcVeYcFwxonO0ap9iYfy329J31D1lWVoD3Dds+EnxwLuGf6Fn5Wk/fTyH6/7kFcwAY/u4sF/dj/8C7wF/hMAAP//z1uUc/gBAAA=",
      "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
      "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
      "dockerEngineVersion": "[parameters('dockerEngineVersion')]",
      "etcdCaFilepath": "/etc/kubernetes/certs/ca.crt",
      "etcdClientCertFilepath": "/etc/kubernetes/certs/etcdclient.crt",
      "etcdClientCertificate": "[parameters('etcdClientCertificate')]",
      "etcdClientKeyFilepath": "/etc/kubernetes/certs/etcdclient.key",
      "etcdClientPrivateKey": "[parameters('etcdClientPrivateKey')]",
      "etcdDiskSizeGB": "[parameters('etcdDiskSizeGB')]",
      "etcdDownloadURLBase": "[parameters('etcdDownloadURLBase')]",
      "etcdPeerCertFilepath": [
        "/etc/kubernetes/certs/etcdpeer0.crt",
        "/etc/kubernetes/certs/etcdpeer1.crt",
        "/etc/kubernetes/certs/etcdpeer2.crt",
        "/etc/kubernetes/certs/etcdpeer3.crt",
        "/etc/kubernetes/certs/etcdpeer4.crt"
      ],
      "etcdPeerCertificates": [
        "[parameters('etcdPeerCertificate0')]"
      ],
      "etcdPeerKeyFilepath": [
        "/etc/kubernetes/certs/etcdpeer0.key",
        "/etc/kubernetes/certs/etcdpeer1.key",
        "/etc/kubernetes/certs/etcdpeer2.key",
        "/etc/kubernetes/certs/etcdpeer3.key",
        "/etc/kubernetes/certs/etcdpeer4.key"
      ],
      "etcdPeerPrivateKeys": [
        "[parameters('etcdPeerPrivateKey0')]"
      ],
      "etcdServerCertFilepath": "/etc/kubernetes/certs/etcdserver.crt",
      "etcdServerCertificate": "[parameters('etcdServerCertificate')]",
      "etcdServerKeyFilepath": "/etc/kubernetes/certs/etcdserver.key",
      "etcdServerPrivateKey": "[parameters('etcdServerPrivateKey')]",
      "etcdVersion": "[parameters('etcdVersion')]",
      "fqdnEndpointSuffix": "[parameters('fqdnEndpointSuffix')]",
      "gcHighThreshold": "[parameters('gcHighThreshold')]",
      "gcLowThreshold": "[parameters('gcLowThreshold')]",
      "generateProxyCertsScript": "H4sIAAAAAAAA/5RW/2+jxhP9nb9izrbOiXQEcC7ffPLnI4tQXZQ0STGVGrUVWsPYbA27ZHedxL3L/14tNgQc4179k5md9+btm2FE94M1pcyaEpkYhuRLESFYPFcW+Xsp0Io4U4QyFNLKBX+iknIWrtOONOLev/vtIXTH4bX3MOr0vtWfhyNLZbnGvazMKKXIlBmRowWuXjsl0A9qKD9ogURCvUFurrzbYKteFdtB0Cy4znQn/ju0O/F3oSMp3qEbqqvYTnSh3Avcy9D3fvnVmwRfvfGl51ewsWbadz4crRkjFEpaAh+XKFWCJEbx5pA5oymWhTa6vLXKrVCTrmk0CrWDaON0M7KHZoGrkuX6fBJWE+H6QfjT1Y13Pw6+asLWw+HIQhVZi+UUBUOF0mpUKcfhDX/tPbQw10/20m6GpKapXe2PSt3oNPAl50KBNtANbkLv9vL+7uo2mJSuNoLDUaJULoeW5QzOjuwj+8gZDo7PLl472zzuuJBRZ9mE2lRV1m0xlS7VqcpYGxeqKG68X9vqvI1NDX1l8AdYG0r98e1lQdY7yBYKs/zQMLowR4aCKATBuQJ3bPAcmZSpPhCSgMmXCnr1lQQD+/N5lSbwEUyGz2C+nNgXYMZkJcE5H5yCHuItZIPMD8CUy+lf0Lfc21HRbbeQ7Y77dWGaXN9sr7JqebWpq4t5S97B4U78ui4ynwucE8WFdTeSK6kwG2ZEKhSyX5VZX70oVtz/7NgGk7JdzO64YYA73uGSRBVKFJSkYA92avQDw3gWVGFY9DxUPIypXBwcwjcDAKCYAaWtUtDbtxnhf9BrXSItVNVaaILre2IvUk/wVt3tol3wMeNPCM8JVShzEiHkJI4pmwNRMMU5ZUw/8Bk4UkFKGRZAiTGYFPqOtP6QltXfc7s2AXvvFCUZj+HUtluzXnd2JnymKgkFKrGqmjTjAihQBg4M4Bg+wwmcwhmcwwU4NjgOOIMvEPMiV/920FZnv0Pv/2DiI9gAf8LHjzAVSBbw/TvIFDGHkyIz5gy1wC5MUx4tYMkUTYGkadEroBIEknhlFDqjLA7pLJwRmi4FgmPbcKKFlW2N0qV+DcwESaoSows/kwWuiRa4kp+g7BekSIp/tWZOMSJLuUl/5qyvgEQR5goIPJEUVFK2WYK2Dgj0zT4cJKs8QXb4waCzSki2+JcZ70DvICIKah9Jr4edL6ASZI1JrZjeRvwdtloer4edfeBiylvQawHrga21Z//cGF24mmnNRcV1wYhnGWEx6CZh/GltW4aEySJR7xaSFj0FfKFSSQNTif+18Iwa/wQAAP//gHPm/+MKAAA=",
      "generatorCode": "[parameters('generatorCode')]",
      "kubeClusterCidr": "[parameters('kubeClusterCidr')]",
      "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
      "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
      "kubeDNSServiceIP": "[parameters('kubeDNSServiceIP')]",
      "kubeServiceCidr": "[parameters('kubeServiceCidr')]",
      "kubeconfigServer": "[concat('https://', variables('masterFqdnPrefix'), '.', variables('location'), '.', variables('fqdnEndpointSuffix'))]",
      "kubernetesACIConnectorCPULimit": "[parameters('kubernetesACIConnectorCPULimit')]",
      "kubernetesACIConnectorCPURequests": "[parameters('kubernetesACIConnectorCPURequests')]",
      "kubernetesACIConnectorEnabled": "[parameters('kubernetesACIConnectorEnabled')]",
      "kubernetesACIConnectorMemoryLimit": "[parameters('kubernetesACIConnectorMemoryLimit')]",
      "kubernetesACIConnectorMemoryRequests": "[parameters('kubernetesACIConnectorMemoryRequests')]",
      "kubernetesACIConnectorNodeName": "[parameters('kubernetesACIConnectorNodeName')]",
      "kubernetesACIConnectorOS": "[parameters('kubernetesACIConnectorOS')]",
      "kubernetesACIConnectorRegion": "[parameters('kubernetesACIConnectorRegion')]",
      "kubernetesACIConnectorSpec": "[parameters('kubernetesACIConnectorSpec')]",
      "kubernetesACIConnectorTaint": "[parameters('kubernetesACIConnectorTaint')]",
      "kubernetesAPIServerIP": "[parameters('firstConsecutiveStaticIP')]",
      "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
      "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
      "kubernetesCcmImageSpec": "[parameters('kubernetesCcmImageSpec')]",
      "kubernetesClusterAutoscalerAzureCloud": "[parameters('kubernetesClusterAutoscalerAzureCloud')]",
      "kubernetesClusterAutoscalerCPULimit": "[parameters('kubernetesClusterAutoscalerCPULimit')]",
      "kubernetesClusterAutoscalerCPURequests": "[parameters('kubernetesClusterAutoscalerCPURequests')]",
      "kubernetesClusterAutoscalerEnabled": "[parameters('kubernetesClusterAutoscalerEnabled')]",
      "kubernetesClusterAutoscalerMaxNodes": "[parameters('kubernetesClusterAutoscalerMaxNodes')]",
      "kubernetesClusterAutoscalerMemoryLimit": "[parameters('kubernetesClusterAutoscalerMemoryLimit')]",
      "kubernetesClusterAutoscalerMemoryRequests": "[parameters('kubernetesClusterAutoscalerMemoryRequests')]",
      "kubernetesClusterAutoscalerMinNodes": "[parameters('kubernetesClusterAutoscalerMinNodes')]",
      "kubernetesClusterAutoscalerSpec": "[parameters('kubernetesClusterAutoscalerSpec')]",
      "kubernetesClusterAutoscalerUseManagedIdentity": "[parameters('kubernetesClusterAutoscalerUseManagedIdentity')]",
      "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
      "kubernetesDashboardCPULimit": "[parameters('kubernetesDashboardCPULimit')]",
      "kubernetesDashboardCPURequests": "[parameters('kubernetesDashboardCPURequests')]",
      "kubernetesDashboardMemoryLimit": "[parameters('kubernetesDashboardMemoryLimit')]",
      "kubernetesDashboardMemoryRequests": "[parameters('kubernetesDashboardMemoryRequests')]",
      "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
      "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
      "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
      "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
      "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
      "kubernetesKubeletClusterDomain": "[parameters('kubernetesKubeletClusterDomain')]",
      "kubernetesMetricsServerSpec": "[parameters('kubernetesMetricsServerSpec')]",
      "kubernetesNVIDIADevicePluginSpec": "[parameters('kubernetesNVIDIADevicePluginSpec')]",
      "kubernetesNonMasqueradeCidr": "[parameters('kubernetesNonMasqueradeCidr')]",
      "kubernetesOMSAgentCPULimit": "[parameters('kubernetesOMSAgentCPULimit')]",
      "kubernetesOMSAgentCPURequests": "[parameters('kubernetesOMSAgentCPURequests')]",
      "kubernetesOMSAgentMemoryLimit": "[parameters('kubernetesOMSAgentMemoryLimit')]",
      "kubernetesOMSAgentMemoryRequests": "[parameters('kubernetesOMSAgentMemoryRequests')]",
      "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
      "kubernetesReschedulerCPULimit": "[parameters('kubernetesReschedulerCPULimit')]",
      "kubernetesReschedulerCPURequests": "[parameters('kubernetesReschedulerCPURequests')]",
      "kubernetesReschedulerMemoryLimit": "[parameters('kubernetesReschedulerMemoryLimit')]",
      "kubernetesReschedulerMemoryRequests": "[parameters('kubernetesReschedulerMemoryRequests')]",
      "kubernetesReschedulerSpec": "[parameters('kubernetesReschedulerSpec')]",
      "kubernetesTillerCPULimit": "[parameters('kubernetesTillerCPULimit')]",
      "kubernetesTillerCPURequests": "[parameters('kubernetesTillerCPURequests')]",
      "kubernetesTillerMaxHistory": "[parameters('kubernetesTillerMaxHistory')]",
      "kubernetesTillerMemoryLimit": "[parameters('kubernetesTillerMemoryLimit')]",
      "kubernetesTillerMemoryRequests": "[parameters('kubernetesTillerMemoryRequests')]",
      "kubernetesTillerSpec": "[parameters('kubernetesTillerSpec')]",
      "labelResourceGroup": "[if(or(or(endsWith(variables('truncatedResourceGroup'), '-'), endsWith(variables('truncatedResourceGroup'), '_')), endsWith(variables('truncatedResourceGroup'), '.')), concat(take(variables('truncatedResourceGroup'), 62), 'z'), variables('truncatedResourceGroup'))]",
      "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
      "locations": [
        "[resourceGroup().location]",
        "[parameters('location')]"
      ],
      "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
      "masterCount": 1,
      "masterEtcdClientPort": 2379,
      "masterEtcdClientURLs": [
        "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
      ],
      "masterEtcdClusterStates": [
        "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
        "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
        "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
      ],
      "masterEtcdPeerURLs": [
        "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
        "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
      ],
      "masterEtcdServerPort": 2380,
      "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
      "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
      "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
      "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
      "masterFqdnPrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
      "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
      "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
      "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
      "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
      "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
      "masterOffset": "[parameters('masterOffset')]",
      "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
      "masterPrivateIpAddrs": [
        "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
        "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
        "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
        "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
        "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
      ],
      "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
      "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
      "masterVMNames": [
        "[concat(variables('masterVMNamePrefix'), '0')]",
        "[concat(variables('masterVMNamePrefix'), '1')]",
        "[concat(variables('masterVMNamePrefix'), '2')]",
        "[concat(variables('masterVMNamePrefix'), '3')]",
        "[concat(variables('masterVMNamePrefix'), '4')]"
      ],
      "masterVMSize": "[parameters('masterVMSize')]",
      "maxPods": "[parameters('maxPods')]",
      "maxVMsPerPool": 100,
      "mountetcdScript": "H4sIAAAAAAAA/3RT0W4TMRB891cMSd7oxUlBlVopRZUAKYI2VQlPCFU+e+9s4tjhbDdpgX9HdtL2EHAvJ+94Z3Zn18MXvDaO1yJoNsSlTy4a18IEKO8ImjqCcSGSUPANKEqFmqRIgfK5Ti10jJtwxnmd2jC2IjmpN0KNHUUurU+qMs5E/rJOLZ+enB5PTl+xIRZOEqKmwmACGrMjdYSONlY8ImT9FlsTdTkWLmQuSC1cS+Hxdo4+VdGaqFM9ln7NLx5SR1zIUJFrjSO+Sdbyk5PpmAWKqHbs7fzThxlXdMeDkuz64mY5X84XV7PRj4z8mrLLxeer5fVifrWc8TvRcWtqnj1QJqxYUnQn1BqBYrTE1itlOlQbjJ6z2Do7ip9oO/oTMA2+YPQGFX3HBF9Z1OQYAJDUHoMskH0RtiOh7lF4SA32V3YmYsIaw4ZojLXINfEmRFGzIjR47Gk66GNPmo7+pTl6MgD7r1fvISJS9PmvqBHJxnDkfCOMPaCTw/94gPPzvnCpVGqSK5gGG9FFE413uZEQA7MBz9r/r3LYy1SeApyPe4oC85A3ObTFuqpytMUUozzIHrxeNWFMu/i6p4jqY1ns233me1TvYMXD/a2JorZ0m3duNj0qoW8+dU7YQyw3tp9wf7TlRUnttw7VTWE+K+/mrw36HQAA//+38WqhfQMAAA==",
      "nameSuffix": "[parameters('nameSuffix')]",
      "networkPlugin": "[parameters('networkPlugin')]",
      "networkPolicy": "[parameters('networkPolicy')]",
      "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
      "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
      "omsAgentDockerProviderVersion": "[parameters('omsAgentDockerProviderVersion')]",
      "omsAgentImage": "[parameters('omsAgentImage')]",
      "omsAgentVersion": "[parameters('omsAgentVersion')]",
      "omsAgentWorkspaceGuid": "[parameters('omsAgentWorkspaceGuid')]",
      "omsAgentWorkspaceKey": "[parameters('omsAgentWorkspaceKey')]",
      "orchestratorName": "[parameters('orchestratorName')]",
      "orchestratorNameVersionTag": "Kubernetes:1.11.0",
      "osImageName": "[parameters('osImageName')]",
      "osImageOffer": "[parameters('osImageOffer')]",
      "osImagePublisher": "[parameters('osImagePublisher')]",
      "osImageResourceGroup": "[parameters('osImageResourceGroup')]",
      "osImageSKU": "[parameters('osImageSKU')]",
      "osImageVersion": "[parameters('osImageVersion')]",
      "primaryAvailabilitySetName": "''",
      "primaryScaleSetName": "[concat(variables('orchestratorName'), '-agentpool1-',variables('nameSuffix'), '-vmss')]",
      "provisionScript": "",
      "provisionScriptParametersCommon": "[concat('ADMINUSER=',variables('username'),' DOCKER_ENGINE_VERSION=',variables('dockerEngineVersion'),' DOCKER_REPO=',variables('dockerEngineDownloadRepo'),' TENANT_ID=',variables('tenantID'),' HYPERKUBE_URL=',variables('kubernetesHyperkubeSpec'),' APISERVER_PUBLIC_KEY=',variables('apiserverCertificate'),' SUBSCRIPTION_ID=',variables('subscriptionId'),' RESOURCE_GROUP=',variables('resourceGroup'),' LOCATION=',variables('location'),' VM_TYPE=',variables('vmType'),' SUBNET=',variables('subnetName'),' NETWORK_SECURITY_GROUP=',variables('nsgName'),' VIRTUAL_NETWORK=',variables('virtualNetworkName'),' VIRTUAL_NETWORK_RESOURCE_GROUP=',variables('virtualNetworkResourceGroupName'),' ROUTE_TABLE=',variables('routeTableName'),' PRIMARY_AVAILABILITY_SET=',variables('primaryAvailabilitySetName'),' PRIMARY_SCALE_SET=',variables('primaryScaleSetName'),' SERVICE_PRINCIPAL_CLIENT_ID=',variables('servicePrincipalClientId'),' SERVICE_PRINCIPAL_CLIENT_SECRET=',variables('singleQuote'),variables('servicePrincipalClientSecret'),variables('singleQuote'),' KUBELET_PRIVATE_KEY=',variables('clientPrivateKey'),' TARGET_ENVIRONMENT=',variables('targetEnvironment'),' NETWORK_PLUGIN=',variables('networkPlugin'),' FQDNSuffix=',variables('fqdnEndpointSuffix'),' VNET_CNI_PLUGINS_URL=',variables('vnetCniLinuxPluginsURL'),' CNI_PLUGINS_URL=',variables('cniPluginsURL'),' CLOUDPROVIDER_BACKOFF=',variables('cloudProviderBackoff'),' CLOUDPROVIDER_BACKOFF_RETRIES=',variables('cloudProviderBackoffRetries'),' CLOUDPROVIDER_BACKOFF_EXPONENT=',variables('cloudProviderBackoffExponent'),' CLOUDPROVIDER_BACKOFF_DURATION=',variables('cloudProviderBackoffDuration'),' CLOUDPROVIDER_BACKOFF_JITTER=',variables('cloudProviderBackoffJitter'),' CLOUDPROVIDER_RATELIMIT=',variables('cloudProviderRatelimit'),' CLOUDPROVIDER_RATELIMIT_QPS=',variables('cloudProviderRatelimitQPS'),' CLOUDPROVIDER_RATELIMIT_BUCKET=',variables('cloudProviderRatelimitBucket'),' USE_MANAGED_IDENTITY_EXTENSION=',variables('useManagedIdentityExtension'),' USE_INSTANCE_METADATA=',variables('useInstanceMetadata'),' CONTAINER_RUNTIME=',variables('containerRuntime'),' KUBECONFIG_SERVER=',variables('kubeconfigServer'))]",
      "provisionScriptParametersMaster": "[concat('MASTER_VM_NAME=',variables('masterVMNames')[variables('masterOffset')],' ETCD_PEER_URL=',variables('masterEtcdPeerURLs')[variables('masterOffset')],' ETCD_CLIENT_URL=',variables('masterEtcdClientURLs')[variables('masterOffset')],' MASTER_NODE=true CLUSTER_AUTOSCALER_ADDON=',variables('kubernetesClusterAutoscalerEnabled'),' ACI_CONNECTOR_ADDON=',variables('kubernetesACIConnectorEnabled'),' APISERVER_PRIVATE_KEY=',variables('apiServerPrivateKey'),' CA_CERTIFICATE=',variables('caCertificate'),' CA_PRIVATE_KEY=',variables('caPrivateKey'),' MASTER_FQDN=',variables('masterFqdnPrefix'),' KUBECONFIG_CERTIFICATE=',variables('kubeConfigCertificate'),' KUBECONFIG_KEY=',variables('kubeConfigPrivateKey'),' ETCD_SERVER_CERTIFICATE=',variables('etcdServerCertificate'),' ETCD_CLIENT_CERTIFICATE=',variables('etcdClientCertificate'),' ETCD_SERVER_PRIVATE_KEY=',variables('etcdServerPrivateKey'),' ETCD_CLIENT_PRIVATE_KEY=',variables('etcdClientPrivateKey'),' ETCD_PEER_CERTIFICATES=',string(variables('etcdPeerCertificates')),' ETCD_PEER_PRIVATE_KEYS=',string(variables('etcdPeerPrivateKeys')))]",
      "provisionSource": "H4sIAAAAAAAA/9xVTW/aQBC951e80lUEkTZAqHooos2FW2899JBQa2OPYRXb6+yO26Yh/73yYhsCbgsoUqJyWrNvPva9+Xj7pn+js75bnJxYYnsfplGg4yBWOiksdXt4OAGA8k6Tm4jhGD+U5sAlRPlEXIzBOiVT8ESMxnALHTNOT7cO3kVsLDR0BtF1dIchROW0N0ZkPKT8Ve4gmsPD5WNzewXxCZLuMABmpf8bS+oWyyWuG4yOS5j2sDoGZmPwgrIGVP4oXBhMf1JYMEW47ojL605pWEZ24ydQS1zYDMPmT0ocPUF4QiDW5DS3sfbHyGQri3+EfWwTIshM4Fix+78VeS6aNzicEwes7I1KkoY7Vjb4G38ruOevsMlEvFvr1hEPG9aPtQydPxC6gd0iVVlI/hV7SBnteEI3YhxJai3s+wHCwiaQsfvyGcIfzW6Gh+jgAbGxQayTvcZJicsVLyZidEiRekZkDFHbt1LhqdzO9IUqVOXsi7PII8W71AwH/rNErRCBKTgveNLnNO+rnOWcWK6uzk1xVEePBojy2zmkDE0W63lhCVK1wap4JcPyHjpzvFkQNXB4sUauMsPFx9MhlmAiiJ23YIm5pRxyis637tXX6ezD+Vlv2b2i6cza87Oe6Gy1RUZNW4SK21y2N0w7+JnkryQfDfYc+VsU1aN/oyYqgl9w2O9ZGs1OqN9UZQ4pMyOrD2kpNGlKWeTK6nmd66NutnVLHqjmHi9v2fXu3jGlISeBJcfK8mGaw30PM5VSvaOOXelNGogUpSaTlhKjon0MqrwhqlRen7RP5u7vAAAA//9Gx/9Q8QoAAA==",
      "readerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "registerWithTaints": "node-role.kubernetes.io/master=true:NoSchedule",
      "resourceGroup": "[resourceGroup().name]",
      "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
      "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
      "scope": "[resourceGroup().id]",
      "servicePrincipalClientId": "msi",
      "servicePrincipalClientSecret": "msi",
      "singleQuote": "'",
      "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
      "sshNatPorts": [
        22,
        2201,
        2202,
        2203,
        2204
      ],
      "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
      "storageAccountBaseName": "",
      "storageAccountPrefixes": [],
      "subnet": "[parameters('masterSubnet')]",
      "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
      "subscriptionId": "[subscription().subscriptionId]",
      "targetEnvironment": "[parameters('targetEnvironment')]",
      "tenantId": "[subscription().tenantId]",
      "truncatedResourceGroup": "[take(replace(replace(resourceGroup().name, '(', '-'), ')', '-'), 63)]",
      "useInstanceMetadata": "true",
      "useManagedIdentityExtension": "true",
      "username": "[parameters('linuxAdminUsername')]",
      "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
      "virtualNetworkResourceGroupName": "''",
      "vmType": "vmss",
      "vnetCidr": "[parameters('vnetCidr')]",
      "vnetCniLinuxPluginsURL": "[parameters('vnetCniLinuxPluginsURL')]",
      "vnetCniWindowsPluginsURL": "[parameters('vnetCniWindowsPluginsURL')]",
      "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
      "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]"
    },
    "resources": [
      {
        "apiVersion": "2014-10-01-preview",
        "name": "[guid(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('agentpool1VMNamePrefix'), 'vmidentity'))]",
        "properties": {
          "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('agentpool1VMNamePrefix')), '2017-03-30', 'Full').identity.principalId]",
          "roleDefinitionId": "[variables('readerRoleDefinitionId')]"
        },
        "type": "Microsoft.Authorization/roleAssignments"
      },
      {
        "apiVersion": "[variables('apiVersionVirtualMachineScaleSets')]",
        "dependsOn": [
          "[variables('vnetID')]"
        ],
        "identity": {
          "type": "systemAssigned"
        },
        "location": "[variables('location')]",
        "name": "[variables('agentpool1VMNamePrefix')]",
        "properties": {
          "overprovision": false,
          "upgradePolicy": {
            "mode": "Manual"
          },
          "virtualMachineProfile": {
            "extensionProfile": {
              "extensions": [
                {
                  "name": "vmssCSE",
                  "properties": {
                    "autoUpgradeMinorVersion": true,
                    "protectedSettings": {
                      "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                    },
                    "publisher": "Microsoft.Azure.Extensions",
                    "settings": {},
                    "type": "CustomScript",
                    "typeHandlerVersion": "2.0"
                  }
                },
                {
                  "location": "[variables('location')]",
                  "name": "[concat(variables('agentpool1VMNamePrefix'), '-computeAksLinuxBilling')]",
                  "properties": {
                    "autoUpgradeMinorVersion": true,
                    "publisher": "Microsoft.AKS",
                    "settings": {},
                    "type": "Compute.AKS-Engine.Linux.Billing",
                    "typeHandlerVersion": "1.0"
                  }
                },
                {
                  "name": "managedIdentityExtension",
                  "properties": {
                    "autoUpgradeMinorVersion": true,
                    "protectedSettings": {},
                    "publisher": "Microsoft.ManagedIdentity",
                    "settings": {
                      "port": 50343
                    },
                    "type": "ManagedIdentityExtensionForLinux",
                    "typeHandlerVersion": "1.0"
                  }
                }
              ]
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[variables('agentpool1VMNamePrefix')]",
                  "properties": {
                    "enableAcceleratedNetworking": "false",
                    "ipConfigurations": [
                      {
                        "name": "ipconfig1",
                        "properties": {
                          "primary": true,
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig2",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig3",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig4",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig5",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig6",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig7",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig8",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig9",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig10",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig11",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig12",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig13",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig14",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig15",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig16",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig17",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig18",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig19",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig20",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig21",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig22",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig23",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig24",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig25",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig26",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig27",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig28",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig29",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig30",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      },
                      {
                        "name": "ipconfig31",
                        "properties": {
                          "subnet": {
                            "id": "[variables('agentpool1VnetSubnetID')]"
                          }
                        }
                      }
                    ],
                    "primary": true
                  }
                }
              ]
            },
            "osProfile": {
              "adminUsername": "[variables('username')]",
              "computerNamePrefix": "[variables('agentpool1VMNamePrefix')]",
              "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n    \n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n    \n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates= --image-gc-high-threshold=85 --image-gc-low-threshold=80 --image-pull-progress-deadline=30m --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=30 --network-plugin=cni --node-status-update-frequency=10s --non-masquerade-cidr=10.240.0.0/12 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests --pod-max-pids=100 \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpool1,storageprofile=managed,storagetier=Standard_LRS,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTzU7jSBC++ylKCYfdQ8ebEO2yIB/4MUwEAhQHcQhR1LaLuJR229NVncAM8+4jJ8AQCKPxyVX9/XWpenxjSSbBCXLmqBaqbHTuUzQowXFlc2o611qK+IFYOAo9u9BUmTZhSjacP0PbMMSvnhzmQTBO0C0ow0kwRBbtJNJmqR85iO2CXGVLtHJKBqMQJQtzvNfeyKtS4rMMmeMHkkS0eI66/d0gfsAsabSuHUYr51RzAWFVS6i/eYdhVlnRZNHxi1SHiy28cp6TA1VDuNAuNJS+Ov8JNrP0WRaVQYvuYQw7f5WVtwJPMHNYw13rvdNdC55gmYEyf4MyCP/ABA5ACrSwtl3RlUrJ5h9ifmwcwD21tqV/lin1HBUX2uFHtaANo4IYiEFDrZ2QNrCs3Fy7ytscpAJpzn3N4lCX0OyGsyjYcNjjftAGKERq3g/DGUnh005WlSv9Ne7t74rCYb/7f/ff9qrIqrLZB7Xb7fV7e//tdt9dhJub8CNnYkAtwaJ0qF70O5LVU4fiCLkX7W2S1JqFqejUIIMSsLqZhCGWrVCqfw/9ZO3hLoDnTym0jYRidAt0Gye2ylEZnaLhqLXz/fzmKL6IR9PLq5N4enF4FF8kP1obhEXU26wr40tUtfEzsiont346bwa7RqwB/Ia782J2fHV5Ojj7VV9dj5JtuGF8NkhG8XCVbkv7djD6Mh0dDi5HSRCMB5ZFGzMJbrUVzI8eo9IbIeUZXUe0m6EEPwMAAP//egq4kGEEAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n    # SNAT outbound traffic from pods to destinations outside of VNET.\n    iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d ',variables('vnetCidr'),' -j MASQUERADE\n    sed -i \"s|<azureCNINetworkMonitorImage>|',variables('AzureCNINetworkMonitorImageURL'),'|g\" \"/etc/kubernetes/addons/azure-cni-networkmonitor.yaml\"\n\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- timeout 10 apt-mark hold walinuxagent\n- timeout 10 apt-mark unhold walinuxagent\n\n- mkdir -p /var/log/azure && touch /var/log/azure/cloud-init.complete\n\n'))]",
              "linuxConfiguration": {
                "disablePasswordAuthentication": "true",
                "ssh": {
                  "publicKeys": [
                    {
                      "keyData": "[parameters('sshRSAPublicKey')]",
                      "path": "[variables('sshKeyPath')]"
                    }
                  ]
                }
              }
            },
            "storageProfile": {
              "imageReference": {
                "offer": "[variables('agentpool1osImageOffer')]",
                "publisher": "[variables('agentpool1osImagePublisher')]",
                "sku": "[variables('agentpool1osImageSKU')]",
                "version": "[variables('agentpool1osImageVersion')]"
              },
              "osDisk": {
                "caching": "ReadWrite",
                "createOption": "FromImage"
              }
            }
          }
        },
        "sku": {
          "capacity": "[variables('agentpool1Count')]",
          "name": "[variables('agentpool1VMSize')]",
          "tier": "Standard"
        },
        "tags": {
          "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpool1VMNamePrefix'))]",
          "orchestrator": "[variables('orchestratorNameVersionTag')]",
          "poolName": "agentpool1",
          "resourceNameSuffix": "[variables('nameSuffix')]"
        },
        "type": "Microsoft.Compute/virtualMachineScaleSets"
      },
      {
        "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
        "location": "[variables('location')]",
        "name": "[variables('masterAvailabilitySet')]",
        "properties": {
          "managed": true,
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 3
        },
        "type": "Microsoft.Compute/availabilitySets"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
        ],
        "location": "[variables('location')]",
        "name": "[variables('virtualNetworkName')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('vnetCidr')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('subnetName')]",
              "properties": {
                "addressPrefix": "[variables('subnet')]",
                "networkSecurityGroup": {
                  "id": "[variables('nsgID')]"
                }
              }
            }
          ]
        },
        "type": "Microsoft.Network/virtualNetworks"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "location": "[variables('location')]",
        "name": "[variables('nsgName')]",
        "properties": {
          "securityRules": [
            {
              "name": "allow_ssh",
              "properties": {
                "access": "Allow",
                "description": "Allow SSH traffic to master",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "22-22",
                "direction": "Inbound",
                "priority": 101,
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*"
              }
            },
            {
              "name": "allow_kube_tls",
              "properties": {
                "access": "Allow",
                "description": "Allow kube-apiserver (tls) traffic to master",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "443-443",
                "direction": "Inbound",
                "priority": 100,
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*"
              }
            }
          ]
        },
        "type": "Microsoft.Network/networkSecurityGroups"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "location": "[variables('location')]",
        "name": "[variables('masterPublicIPAddressName')]",
        "properties": {
          "dnsSettings": {
            "domainNameLabel": "[variables('masterFqdnPrefix')]"
          },
          "publicIPAllocationMethod": "Dynamic"
        },
        "type": "Microsoft.Network/publicIPAddresses"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
        ],
        "location": "[variables('location')]",
        "name": "[variables('masterLbName')]",
        "properties": {
          "backendAddressPools": [
            {
              "name": "[variables('masterLbBackendPoolName')]"
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "[variables('masterLbIPConfigName')]",
              "properties": {
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                }
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "LBRuleHTTPS",
              "properties": {
                "backendAddressPool": {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                },
                "backendPort": 443,
                "enableFloatingIP": false,
                "frontendIPConfiguration": {
                  "id": "[variables('masterLbIPConfigID')]"
                },
                "frontendPort": 443,
                "idleTimeoutInMinutes": 5,
                "loadDistribution": "Default",
                "probe": {
                  "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
                },
                "protocol": "tcp"
              }
            }
          ],
          "probes": [
            {
              "name": "tcpHTTPSProbe",
              "properties": {
                "intervalInSeconds": "5",
                "numberOfProbes": "2",
                "port": 443,
                "protocol": "tcp"
              }
            }
          ]
        },
        "type": "Microsoft.Network/loadBalancers"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "copy": {
          "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
          "name": "masterLbLoopNode"
        },
        "dependsOn": [
          "[variables('masterLbID')]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
        "properties": {
          "backendPort": 22,
          "enableFloatingIP": false,
          "frontendIPConfiguration": {
            "id": "[variables('masterLbIPConfigID')]"
          },
          "frontendPort": "[variables('sshNatPorts')[copyIndex(variables('masterOffset'))]]",
          "protocol": "tcp"
        },
        "type": "Microsoft.Network/loadBalancers/inboundNatRules"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "copy": {
          "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
          "name": "nicLoopNode"
        },
        "dependsOn": [
          "[variables('vnetID')]",
          "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                  }
                ],
                "loadBalancerInboundNatRules": [
                  {
                    "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
                  }
                ],
                "primary": true,
                "privateIPAddress": "[variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))]]",
                "privateIPAllocationMethod": "Static",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig2",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig3",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig4",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig5",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig6",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig7",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig8",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig9",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig10",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig11",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig12",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig13",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig14",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig15",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig16",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig17",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig18",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig19",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig20",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig21",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig22",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig23",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig24",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig25",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig26",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig27",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig28",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig29",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig30",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            },
            {
              "name": "ipconfig31",
              "properties": {
                "primary": false,
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('vnetSubnetID')]"
                }
              }
            }
          ]
        },
        "type": "Microsoft.Network/networkInterfaces"
      },
      {
        "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
        "copy": {
          "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
          "name": "vmLoopNode"
        },
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
          "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]"
        ],
        "identity": {
          "type": "systemAssigned"
        },
        "location": "[variables('location')]",
        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
          },
          "hardwareProfile": {
            "vmSize": "[variables('masterVMSize')]"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex(variables('masterOffset'))))]"
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('username')]",
            "computername": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
            "customData": "[base64(concat('#cloud-config\n\n\npackages:\n - jq\n - traceroute\n\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n- path: \"/etc/kubernetes/generate-proxy-certs.sh\"\n  permissions: \"0744\"\n  encoding: \"gzip\"\n  owner: \"root\"\n  content: !!binary |\n    ',variables('generateProxyCertsScript'),'\n\n\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: ',concat('https://', variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))], ':443'),'\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n\n\n\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SRQW+jMBCF7/wKy+dFaK/WKpe9tIe0kSL1EvUwmClYsceWPRDx7yunQJomKdzwe+/z+A0E84YxGU9KyOGvLI6GGiXkzjeycMjQAIMqhCBwqIQ89jWWSXfY9BajnIQUQF/UMTG6LFmo0aacFoINRiW0J47elsEC4flcexc8IbES1+wiBdQ52/nEL8gnH49KcOxzLnPAEMaJXj6eL3/GQZvVf1mOhIzpaQwY8+8+oN7MRu2dg1zAQVbd7JB/hLwg3ycrxDYpcfiG3M+e/54+TLuZnYO3vcOt74mnca9GRtblBSIXgxAuR3bAnRKyQtbVPdvCGSCW1tRnlkV+CBogVtbU1Y1vJrlk1rIngBaJqy0QtNg8N0hseCz3yGyovXpFRGheyY7L8r76+Lm5+zXk5Z8vX4Dhlz7WunhMu1vKbSHrgPVmPgMAAP//6fKK/HMDAAA=\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySsY6jMBCGe57Ccn0IXWud0qS5K3IXKdI10RaDmSVW7LFlD0S8/coJsJsNWZYO+OYb/t9AMP8xJuNJCdn/lMXZUKOE3PtGFg4ZGmBQhRAEDpWQ567GUnvi6K3FWDogaDHKkUgB9IylITG6/MpCjTZljRBsMCoxKspggfD6XHsXPCGxEk+WFCmgzpKTT/wX+eLjWQmOXRZkHAxhHNeU3/jifBkHbcZ+ZS4SMqbfQ8CYbw8B9WYCtXcOcjdHWZ0mQv4QcsH9Ms5AbJMSxw/u7QzvbuzW06tpN9NE723ncOc74jHIXRhkXb7L5AwI4fLIHvikhKyQdbWEzZ4eYmlNfXVZ5KeiHmJlTV09cJPJJbM2ewFokbi6BW7+NEhseCgPyGyovUsREZp/ZIf5WG99fD7T5Rryb3FdPgvDF32sdfHctljKYyHrgvVm3gIAAP//7hHuXJ8DAAA=\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySQW/bMAyF7/kVgs4zjF2FocCwy3roFiDALsUOjMwpQiRSkGgX+feDvNidW7uJbxYfPz7xCZL/hbl4JqP08Fnvzp46o/SeO72LKNCBgNkpRRDRKH3uj9hA8gXzgFlfCyWBnavlUgRjLQU4Yii1WynxmI2yTJI5NCkA4XhuOSYmJDFqyd6VhLb2nrjID5QXzmejJPe1r3LAE+Yrvdn2Vz8fwdXql1rOhILl+yVhrr+HhPZhElqOEeoCnnV7mhT6k9KvyN9XKWRXjHr+D/l1/3gYNd+Y/nj3MCkHDn3EJ+5JrnYXllFs8wrRs0CpWFv2ICejdIti2zXZzBkgN8EfR1ZA2QQNkNvgj+073UyKxd/sfgFwSNI+AYHD7rFDEi+X5oAintziHhmh+0nhMsf3Zl5he94cyGnNIvSdl8DuY5/sxluO4qr8l8TbN7MeQH12I2yekD5I4lYK27TVOCZcLP5uwH2JrC59Gz5vf3PzN4wtI/gbAAD//981VctvBAAA\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4yRsW7zMAyEdz8Fkd3w/w9ZhKJAxw5pAwTozkiEIySiXJFy4LcvZMdOWjRtR5LH43cSdv6NkvjIBvr/1dGzM7CNrgqk6FDRVACMgQwc855qdC5yHZCxpXQZSYd2nssgSqEC6G9cpSNbfA5R9IX0HNPRgKZMFYCNrOiZkhRF/dMtAB+wJQMPZZyYlOSpaDaTZNeRfRx1iSTmZGn0nBrvmUSXGsB22cA6LHWgENNgYP1v48dmH0850CZmntdmuJFLLpuhCLaoBwOrhtQ2V7ZmEq4WBnSvfBqW6FfHIP47ux5Tc/L75ozYEmsz5XTPjli9DvWOVD239y9MGT697A18+Y7x1GW9+y3FV9x7Bn/n/ggAAP//ovMbJ38CAAA=\n\n\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RXX2/bNhB/16cg/NInOnbXAIYwD8iSrHtYUiMpBuwpOFMXiwv/jTy5cbAPP5CSbEm2W29rsPWAIDTvjvfvxzsKnPwVfZDW5Gw9zZ6kKXJ2j34tBV4IYStDmUaCAgjyjDEDGnNWIrhA6JuN4EBgzp6qJfKwCYQ6Y0zBElWIOixxvEHCMJb2TKgqKvNQm8nZiHyFoyQJRWGNBgMr9OO+mrYF5uwOhTVCKsw45+mvG4JfghhDRaX18gVIWjN+miXt9XSJBG2El7ULd1bhgfDqGPI2Sv5JUskNGLN5vbiuTag8Xj/LQCHzlcKQZ5yBk++9rVyyxxk+E5oYaUg/wbm48Bhs5QU2QgU6ZTcaDUXmGv2yYayQ0n8lQ734BCTKtKpcAYRp6dLmnunRaN8SrhsjfAeD5qctmpWzxWlufIVS/ihNIc3qf1lRq/AOH6ORNrGfCTFjbB+nJ8QSquXvKChB5+BVPv0CD8uxbQ6X1jzK1Q24z/QFLpLQf9AeeklvnbuNyan9rnzKc87+5PWBnRBTDmvPz9ZTUK6Eae1fCnz/lONJatLeS9E/i7gvWaf55371TilncCiiaWc9NfcwLnM2myQzBH6FtGi2Zm8zxgIqFGR94/EscHCuY2sY/K45DW7o1bYhfY1RsufHqw2Yvw+4NssenZICQs6me4nUsdv90onocEyE2ikgbJQ6eYukevrHssIYGGMpYbUjHESJRaXQjxPGB2EJL0kKUNzZImdv3iS1NrBIzkvrJW0uFYRw22lJvM17e0SjIKwhkAZ9xwfOpIYV5uz7nfUW1vcOxQ9byQNAaak3jnakpJY02GNMuCpns5kebGvU1m9y9nby7kb2eB7/qDD864OUXKPBEBbeLrF/Vknk3iMNDTigMmdnJYKi8mXI7F7RLsWqpubw8eOix5JGkgR1hQo29xHcRcRlc+9bIqnRVrTln3e4wmoNpui7yZODw4rEfc7rqsw7uAqV1uA3D+Bk3kCKHUHBRbxxdxjky5eQsB3gLX0TeECzHmayDuvmt4fFh6uH24ub68FRa1AV/uStHppm7FGiKpqHxUHeIoGp7R/jaOpL1u8XF5ev7EJq8x35tVWVxpv4Runllx9+WPBavmdQR+Xa1BmSONs+QVo6BmNni4chkmocN8YK6eeHj2zEXDWfTfTePj6Th8SdjM/32TVA5tN3kwHQdrqNyBCJUYBKj6G0qpif7/F2XwDzo3d025SPizirFHfopS3m300i7bsZSGog6+f47KxBEztN1q1pr+efWEzRPjH7tTr2xowUeu/c20MTg6xCP5yFnD3hJmejy2Zkpe4TPhi1GXVsWxc1rc/ZqJ70LTN+59z3xnuk+PgZTFUbcqakqZ4jP/srAAD//4PtjRF2DwAA\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xYW2/iOBR+z6+w2Odw6YiZUTRUqkq1rWbbosLs68q1D8TCsV1f2DK/fuUkhNgBCqPVavuGz/G5fuc7TrFif4I2TIoMbUbJmgmaoTnoDSNwQ4h0wiYFWEyxxVmCkMAFZGjtXiGlwtQHRmGyOzVbY6FIEOL4Fbjxd1Ap0QIsmD6TA8KdsaBTU7nJUM9qB71SE1MqRYEFXoHuh9cKSSFDL0CkIIxDkqZpcir8IO4gmq8mxUoFaVwSY6hZVeS7e4Xp0/yCChkFxMdTe3qYZejburJSJ/Awu04QUlLbMvC0Nr0L2AsyNP5U/dDSSiJ5hn5MZ6Fyaok6dWFx6y8Y4ECs1MdKFFcbK2UGm9ErWLyr+xQUl9sCIsj8GhAON2nTNPtq2Kl1uj88UW8NijOCTYauOmkX2JL8j1a8x+LoRGKhUBxbqO200i9RLYS02DIpGrsIGZIDdRx0H3OV4wjtRDPLCOapkjRDvV5zTWlZgM3BlWqGaKzCynWVqsb3RsPheLzT4UGWx/O8pGcH6oLQru5lHZZLJpjd7t0qSW+EZTcdgc8BlqA10KnTTKzmVbmYWD2shGyO796BOF/Z9tUU/Q1sldsMjYbD1nnlr/a1AF1kgbCuyjzARPuvxMfdu9JgTNjMvec1bLNdNTtihKQCjb1x9CAOiDeYOzhgt7Qcd6b6s1JJLlfb76XjoFm5NNaPQ7LT5N55O/I63tsabTeefs2z4NukG/DdOzO2wb/kroCWnWgWiRRLtmqsVD8fsWqn1qHKvU8fJOYZ8uBKGhMWMwG65RTrVatYKeqlKZUFZmLybV8Jz80c7G2F3Gkpv+73omvCpH5OJn5KPkXCzeQqOqnySSnTk0GU814TxKYdXJXu7OX58W5xf/dj/tfs+WWRRL2P5xQhVuAV1Mthn5BfEwrIdaPG2QYEGDPT8hXaVV5ixp2GRa7B5JLTDI1b0txa9TvYEHEK2zxDvUEOmNv8Z+pdU2F60Sh5Vvk6/BpOmKc1n+f9YjFrCfzIMcynwPF27nc4NRn63L5qHCFgTCvOUUtqWQHS2ebqPoc9itogatbmrvoNfGZl3GWbO1j0XeSSYB7wULhaLzZoiTphtFq/J4yOO0YLsJoR86E5DZiyg5g42fXm2pF+j36535+GZ3VUg5FOk5AHOSuYjZixgELqbYZGX4aPrCXR8ObAxNpEubKixUEbgYmK3R7989d0R/gYySFU+Buzso4xLZzgrA69cLmy0lgKWoeCytT0JOt4PQ3GYm2nwhTYvE3CFV0SWPhzHdMbJjmkhv0Ez4fDSCqkdyD5Jjr3bwLQk9HVl/6wP+yPfjvEpbXSgIkUU6r7WCs8OPOK+nyOOperdIkJ48xuJ+kpIp0+zR+xeQuJtBlcX7qz+eTw7F9OI8c55MNxPwbaj0GJOsv4Y9CmpKATYbiUa6fa7w4KS+y47ZsN6X+0hVHTSXQ9oLAZCMd51E6n+aTZRHVbYrj+q6FkJajODKizGkuV8iXhV2N0/uYY2FOI9M/Z+8r0f7feO0VF/7v1Xod69jhGcR/bjxfumfEFa+bwlmlZoMLMJGdk67+cS5zWAhP8++Xp0CNZSArdzxT/MR59RkqTIc6Ee0/+CQAA//9+y8oJ6hEAAA==\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RUy27bMBC8+ysI3RklVyEuULgBemkawEDva2psE+ZDWS5d++8LSrUtOYmb8kTMLoczswSps7/AycbQKBwEoWxTvX9YQehhtrOhbdQ3go9hCZl5CLUk1MyUcrSCS2Wn1C6vwAGCdGdjbVxOAtYJvLcGjaqEM6q+00TfxYAgTX9IdxwPx74iFtyoEFvMlArkcdVRoNSROeHpmAR+ljqYIkLgO0eCQdBYaFljsbdlvJGi1OmKvhQdmKSkdIK02uE4tGuODnfTNDyVMM7csSvnIzfq6TWTO+N7cnkaVVlYr2GkUc9xabZos8PsZCAI2QAeyTDRewrtxaVWVb09duCiqBrBU7taVVqXFhPD2m7m9Z64dnZVF8xB6kutmh46TdrYluePpW0xIAvb8per5jVIMkNvSJDmT4cObD2CkFuwFWvIvcT2awhR+nzn0ySsp03J5/GS7veTtWUHM7rtncczLEaKmQ1GD6GArxlJJphSpsuNeri/92c0wWS2clzEIDjIuL1ju7cOG7SNKqovQ40ue/yIOYz5tfIFeSHZNqqqIaZOydUGLKka0Q4+UnK6L+ltTDIRTu3P4I5Xd77DfonsLT3E6Ev9v+k/81TGExlq/7qmOH2G/I68m+BDnqMnXxp7KeNp/JWWE9dpS4zaUJ+gXVtDkxBuJHyb+zO2PzB9m/ijcd0YVvl4lnAw5Vc5Hygf+NVPFFOjnA35MPsTAAD//zcsf+33BQAA\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9xVS2/bRhC+81cMeM5KMZKDsWgDpDGQHhJDsNxeCh9GyzG51b66O1TNFv3vxdKiRMaSLBsIUJQnYl7ft/PEoH+lmLR3EjYXxVq7SsKS4kYr+qiUbx0XlhgrZJQFgMEVmZT/ANaXSWAIEtbtiqIjpiQqTM3KY6weLXaKmfZzZdrEFEV6DC+h5NhS2VtiVXln0WFNcTZ1s74iCTekvFPaUAHg0NJR1KxMAdXWQqQuMdlCCLF93Y03VIzfHVeoZthy46P+C1l7N1tf9tCbi8njj+MKq522aI7j/ydSF1tDSRYCMOjP0bchSfitLO8KgEjJt1FRL0mkInHqFRuKq16oIiFTefe8u/LuXtcWw6sjjAkMiuuc2Kw8WIA1daLxpqI4xayJyzdQtqHK0G+grMjQq55xHo9EzNrV6RSLsxLQF/oIckMYcj9MQUL0D91Lgs8Hj1MQb6BsmIMcBHKQpJHoyWPv+oE7e8r2k/mTdpV29f9s7ryhG7rPHIbSnEhIATDaVGc9P7Wr30lxP9sHd/jrl+apC3H8NJydxecq8hraKZDKPIKP3BMS/a+E9+/f9aCMsSZe9LLLR2EiQ4p9PK9PuAsk4dpXlIM8yRM9MLn8m+abixUxDnm7omB8Z+nUVf0+N/P7ZjpSMFphknDxJJcWWTVfRi88I71kg0GmbYBRpvJnJrHOGeqBZv6Ud4zaUdxFEICxHsUTIAS27EVNjiIyCUWR9b1WyJQmZsMGFI1P/GO/J+fzQTgbZUpevt05aos1SfhhT/dqYLsMpD5MDRetMQtvtOokfDR/YrdnYPSGHKW0iH5Fe/4Amchn4rEIICA3Esp5OZWOh2D/JdVQboefb28Xy5FGO80azRUZ7Ja5vaok4d3bkQVrS77lQ8qTHbanMynFrlyLQ0RD9OyVNxJuPy128v2xG5lG+qOlxGmaFBXaw5X4tPjlZuvxYeJhyfrYHXb62usO+Rlt9Uuwv2T7lwJ/47TxprX0Ne//MbI4dVByp6cxrM3ui7515mPlY/BJqV4Qlmzg7kpHCX//sxWnycG6fq5VnK9oOdkz+cu79ptV6JMEo137UPwbAAD//3JLoyPsDAAA\n\n- path: /etc/kubernetes/addons/azure-storage-classes.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8ySwWozMQyE734Kkbv3J7cfX3ttQ2mg16LYSmp2bS+SHGifvqw3DWwbSg8l5CzPaOazcIzPxBJLdiBaGA/U9f+li+Xfcb0jxbXpYw4OtvPwbkARk0gxoKIzABkTOQi0xzqoAcCci6LGkmUaw6etn5TdZNn1dUecSantiWJPatveOFgpV1oZgAF3NJxsliI/VFFiK8TH6OmsGbkc41SH2H2R4HtlsiFKb0ZkTKTEzXsu+IAZDxTMOTB6X2pWfRtpqo85IIeX+6etAfDoX2M+pBLIwaZkMtZa81cw0xzFjkwp1vQd6u1weZwjXhWLnP7ilrn86l4utP6R1QUmLeQ+DnQVGG3REob0ddOSLBp/BAAA//8PCjfjVwQAAA==\n\n- path: /etc/kubernetes/addons/kube-tiller-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RUXWvbShB9169Y/C4Hc3PhslwCbmKSQJwaOy3tUxivpvY2+9WdWWP31xcpsaKvhuQhhepJu3uOzjkzo4WgP2Mk7Z0Uu0n2oF0hxQrjTiucKuWT48wiQwEMMhPCgUUpWBuD8WlJARRK8ZDWmNOBGG0mhIE1GioZojqJDhlprP2JMokYY06PIlKMOCYcVUgoCu8sONhgHLdp1hclduYoRZztNTGNsjzPs2aCuAY1hsRbH/VPYO3d+OG/ir6brJHhGPD80cPSG/ygXaHd5qWQfyZL9AaX+K2UgaAvo0/hhUCZEL0otfOjLSisdhml9XdUTDLLxWB/X9vVbrW789KqYbNoEIIUWzS2WnXE3rOmbbG8wGD84fcBKaAqHQcfubKe982WZ1Kcnk7+Oa3WDHGDvKh2axihQcU+viI+HwLWXbxe9IqMe0ZXvlJnhi+qMBY7P+jfXHdGGwwwPrpvpiqfZrJ+usGExw9X762hv+1ChVDeMWiHsdbIBbrds+BxGu6ub25my/vb6Xy2WkzPZzVAiB2Y1LsLB9lX16u7j8uv9/Pplz5/9P9zke8qj3PYX2liHw9noxqvLWxQih54FVCd1Sijd+iQaBH9GmVDbMscLpGbW0IE4K0UJ0dS+6ye/X8b+9pp1mAu0MBhhcq7gqSYNACsLfrEA2e9hh1VqFn1ujGLzr/3wkciQqHfnLpmvW/siORTVEhNExF/JCSmtjEV0kCDzxeflk/wsxbcovXxMMCYVwdDJKOtfrXqTQl+k2SL4XyBq9bdWD7lrda5VTxJYbRL++xXAAAA//9fQ5xvoQgAAA==\n\n- path: /etc/kubernetes/addons/azure-cloud-provider-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/7yQMW/jMAyFd/0KIouXUw7ZDtrubuieAl2CDLT8mqqRJYOkDDS/vrANZClQdCi6SiTf+z7vveMpPUE01RJIeo57bvZSJd3YUi376x/dp/p7PvQwPrhrKkOg/7mpQY41w40wHtg4OKLCIwLpmxrGwLcm8DHXNvhJ6pwGiCPK3CPrMk10bT2kwLBmxO2qV8icIgLtTBp2TlqGBueJp/QgtU0a6NR1Z0ck0NokYn1RRIHp+jFDeg1LBp26C6z71UUBG7qz+wbqf6kMqVx+Ar5mHPG8rHx0T3cln1B8qZq2/hXRVs1bzuNW5G+MtRW7H5kWa2oo5uea2wjfp7LBLQM68VJ+YfNbnnsPAAD//990ZYZlAgAA\n\n- path: /etc/kubernetes/addons/kube-metrics-server-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RWTU8zNxC+76+wcuHkACoHZLWVKEVVJagigrhWjndYpvGXxrOB9NdX+5Vk87EifYGXdy9xvJ555plnZrw64iNQwuCVWJxnc/S5ElOgBRq4MiaUnjMHrHPNWmVCeO1ACQdMaJJMQAugdjtFbUCJeTkDmZaJwWVCWD0DmypLUb8hDwxpjOHU2DIxUO0DK8MRUwmj+qTO8+Cd9roAGvfNXMhBiRufSoKbV0ycMilltsmDZtqMdcnPgfBfzRj8eH5ZG68YXjfg98HCHnpN9GqH5WeQodJCUpkUOuIfFMpY40kxqpwRpFCSgXYvhjzVCx9yaFedENXfBdCsPVoA178WU7N40Wye98DAK4Ov8pj2AOYQbVg68PxG99+kzG/oc/TFVxMoWLiHpwqky90AsUyI3YobppHK2T9guC6Cvf14bBceo8IMWHdSDGvQR5eVP0mg8+8/D/6nQj1pVm0gdcQNiuAZTW3ekf0ycr2pc/pBqLYCa/FysFBoDj9uI23R+HBlti/Md7spj0vkrkgN9uiuBz46Qs0UwVShJLBgOFBbCZdJ6hj3sIqBeHUpEStxcfFTbRIpcDDBKvFwPal3WFMBPFmd2k7q+gLaqu/fV5fP+32RHCT0cWW/P7Wuui9vN0IbCo7BRasZWtONZFTPgYRUj+0BDPPv4qzXvb756zCACZ41eqAViByKRwh0ugAlfl6nrS3aaX1uGsH82j88Ka2dBItmqcSVfdHLtHpvgnPa52t+UpwewJVCyubT5pcNxVLpnKbl3zqiOjnp8hlymPbEqp6qMrfEDkkJi7583alpHZGgwMQ0ML+vJn8eniPt0XFLZz0UP2NSr0u28ZQNltnBziuaEb9DYbGep00+hECfwJQE0znGh9vpIxA+LZWoCHSOJoSBkJd36NGVTonzs7O1s+5ts/1fAAAA///EKdgc5gwAAA==\n\n- path: /etc/kubernetes/addons/azure-cni-networkmonitor.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTwW7bMAy95yuIXnpygt4GYRhQtB1WYE2HddidsdlEiEQKEuXF+/pBttvYabqNpyCP7z3yicZgf1JMVtgAHZS4/Eyr9mpDileLveXGwC2SF34iXXhSbFDRLAAYPRnA3zlSVbOtmPSXxL0XtipxbEgBazKwzxuqUpeU/ALA4YZcKhoAGMJRxKfhv6YR9si4pbgs1MiklJZWVl4aMnBxxylHujvYpOlikQLVRS2Ro1olDsoetd59nVgB7D+k6q2hkg8OlUbaZMVSbqbwnkY/NrMoagnw2J7qHTXZUVyiCzs8WaeOVm2NrgrSGLi87Gkv65RScRTnmhXsqTNwM1KvS1jpkV336imhcCQaGBIaAZaGnmYRlSoPfTKVJAPOcj6MTbWwomWKk72qk/d/TaGU9bglAx978GZ9vx5O42E4jfuCfpq0J6pztNrdCCsd1EwggBBtax1tqTGgMdMEJG7nvS9DfXl8+rG+fribgQAtukyfo3hzAgA8W3LNd3p+i5QTPX4j7dWZhp78DXVn+rdblqDX6KejtuKypwfJrGnq8TIxbRQ3jlIVs6MqUpCZjy/EwWHVYlzFzGdEnGz/yjriO0k6Psos1WHMyam9FS7UXnNiFc55lNIukIFbG/uj6xb/vfQ/XGLm1fs2fwIAAP//XtstetUEAAA=\n\n- path: /etc/kubernetes/addons/audit-policy.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/7RVwY7jNgy95ysI51Cg2HiwtyK3aQsUBabbRbrTHoo5KBJjC1FIV6ST8d8Xkhw7mWSAHqY3JabI954eSdP5PzGKZ1qD6Z3Xev+D1J4fjp+3qOYzLOFb6wW8QMR/eh/R1Yu9J7eGrxy8HRZL+JnpO4UGCaNRLGkAj0gqsOMIJoR8GUUFPMGmnDdo0R/RgahpsF7wwesf6SjrBcAKqjdx1SL2oXxcwhM30LED2xpqUMDonFY6JkEIeMSQM+XT+m3AAgAgonAfbUmbYpvIfbeGqsq/U6nNGAJVx04qcIySCB+M2nYmpgyGBpB+e84JvEsY5dOU6tR62yYtLZN4USSFk9cWtEXY/Pj4E3RZ1Hq8MaODv0v1l8VEP//xELipPo1nUaO9VEmM31CNM2puVTh/+W/0bxDcKziCKj4I3MDpWprtkAlWMojiYb3vt7jqIr8OFTABkuvYJ7NwBMF49BblEvEXpvJYvWDMQG4TveSAI8ZtDsgAxj/f5whLsBwRHr/+Wv68R3qCl1if4d1SNr22SOqtUXRXrrAY1XgCYlpN1njePEFntJX6Xaa/JESXdK9KjOSI6ezP583TRLF6MJ3/PhH8ywdnTXTFrp6aego5lsavZkulVxqhw5bdkBxsmXa+OZhu6jVPkJUvsOo7LfYRuk91ZaQ6TqI0BIApDGC6LnjMGk83E7jstQuEFZA5oHTGYj1lQsBDpwOIRk9NAmUNwRaT9C6lFAxoNb/adN3NhUqm6UuGfFnzolHvyipoI+pZ0/9LxFLlamykaczaYrwWLecy5ABfFSn5Ig/VPJhG6BnehyGdA+aKKXRcR0mjHADSch8cfPn9W3oeTzb0Lm2hzOgRbPL1Ku+Y5Azl0o4XLMdWHNlcT8b63dGY1KJmFXuiZJApTfB7LAMuWa81CrtUrCeHEXRy6MmHAMQ65pq3I10uyDvrsBjrehmOHXuzEP8NAAD//+gVlJa+BwAA\n\n\n\n\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates= --image-gc-high-threshold=85 --image-gc-low-threshold=80 --image-pull-progress-deadline=30m --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=30 --network-plugin=cni --node-status-update-frequency=10s --non-masquerade-cidr=10.240.0.0/12 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests --pod-max-pids=100 \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NODE_LABELS=kubernetes.io/role=master,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n  \n    KUBELET_REGISTER_NODE=--register-node=true\n    KUBELET_REGISTER_WITH_TAINTS=--register-with-taints=',variables('registerWithTaints'),'\n  \n\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTzU7jSBC++ylKCYfdQ8ebEO2yIB/4MUwEAhQHcQhR1LaLuJR229NVncAM8+4jJ8AQCKPxyVX9/XWpenxjSSbBCXLmqBaqbHTuUzQowXFlc2o611qK+IFYOAo9u9BUmTZhSjacP0PbMMSvnhzmQTBO0C0ow0kwRBbtJNJmqR85iO2CXGVLtHJKBqMQJQtzvNfeyKtS4rMMmeMHkkS0eI66/d0gfsAsabSuHUYr51RzAWFVS6i/eYdhVlnRZNHxi1SHiy28cp6TA1VDuNAuNJS+Ov8JNrP0WRaVQYvuYQw7f5WVtwJPMHNYw13rvdNdC55gmYEyf4MyCP/ABA5ACrSwtl3RlUrJ5h9ifmwcwD21tqV/lin1HBUX2uFHtaANo4IYiEFDrZ2QNrCs3Fy7ytscpAJpzn3N4lCX0OyGsyjYcNjjftAGKERq3g/DGUnh005WlSv9Ne7t74rCYb/7f/ff9qrIqrLZB7Xb7fV7e//tdt9dhJub8CNnYkAtwaJ0qF70O5LVU4fiCLkX7W2S1JqFqejUIIMSsLqZhCGWrVCqfw/9ZO3hLoDnTym0jYRidAt0Gye2ylEZnaLhqLXz/fzmKL6IR9PLq5N4enF4FF8kP1obhEXU26wr40tUtfEzsiont346bwa7RqwB/Ia782J2fHV5Ojj7VV9dj5JtuGF8NkhG8XCVbkv7djD6Mh0dDi5HSRCMB5ZFGzMJbrUVzI8eo9IbIeUZXUe0m6EEPwMAAP//egq4kGEEAAA=\n\n- path: /etc/systemd/system/kms.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SQvU7rQBCF+30Kv4C90a2uLG0BgoI2CaIIKTabkzDy/piZWYfw9CgJNBYSzWjOp08z0tk8Z9KteYAEplGpZOc/K2NIYpZ4r8QQty9hAHcCnijA3B0U7DL0VHhoS46U0annI9SYzepmbc36PMIJpTHCLCHqWZ2PJ38Ws6aEUnV1YSsEtzCPHwjX6GwVtjvK9va14ZqbV9M0bZuh7q2IfsepxJrgbBm1v4wZhgY71B04QyH9LP8ii0QbwCo2+Pay0IGCV0gXWPu/ldnJybONtLMn74/I2s/BVU8UuEg5qB3+S3ttvh2S9NOiW3T/jNk8ZVEf49a8+KzY359dqlGprQL+6fwrAAD//4M+IrHEAQAA\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -e\n\n\n\n    # SNAT outbound traffic from pods to destinations outside of VNET.\n    iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d ',variables('vnetCidr'),' -j MASQUERADE\n    sed -i \"s|<azureCNINetworkMonitorImage>|',variables('AzureCNINetworkMonitorImageURL'),'|g\" \"/etc/kubernetes/addons/azure-cni-networkmonitor.yaml\"\n\n    sed -i \"s|<kubernetesAddonManagerSpec>|',variables('kubernetesAddonManagerSpec'),'|g\" \"/etc/kubernetes/manifests/kube-addon-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeClusterCidr>|',variables('kubeClusterCidr'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    sed -i \"s|<kubernetesKubeDNSSpec>|',variables('kubernetesKubeDNSSpec'),'|g; s|<kubernetesDNSMasqSpec>|',variables('kubernetesDNSMasqSpec'),'|g; s|<kubernetesExecHealthzSpec>|',variables('kubernetesExecHealthzSpec'),'|g; s|<kubernetesKubeletClusterDomain>|',variables('kubernetesKubeletClusterDomain'),'|g; s|<kubeDNSServiceIP>|',variables('kubeDNSServiceIP'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n    sed -i \"s|<kubernetesHeapsterSpec>|',variables('kubernetesHeapsterSpec'),'|g; s|<kubernetesAddonResizerSpec>|',variables('kubernetesAddonResizerSpec'),'|g\" \"/etc/kubernetes/addons/kube-heapster-deployment.yaml\"\n\n\n    sed -i \"s|<kubernetesDashboardSpec>|',variables('kubernetesDashboardSpec'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPURequests>|',variables('kubernetesDashboardCPURequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryRequests>|',variables('kubernetesDashboardMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPULimit>|',variables('kubernetesDashboardCPULimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryLimit>|',variables('kubernetesDashboardMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n\n\n\n    sed -i \"s|<kubernetesTillerSpec>|',variables('kubernetesTillerSpec'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPURequests>|',variables('kubernetesTillerCPURequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryRequests>|',variables('kubernetesTillerMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPULimit>|',variables('kubernetesTillerCPULimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryLimit>|',variables('kubernetesTillerMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMaxHistory>|',variables('kubernetesTillerMaxHistory'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n\n\n\n\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesMetricsServerSpec>|',variables('kubernetesMetricsServerSpec'),'|g\" \"/etc/kubernetes/addons/kube-metrics-server-deployment.yaml\"\n\n\n\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesControllerManagerConfig>|\\\"--allocate-node-cidrs=false\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--cluster-cidr=10.240.0.0/12\\\", \\\"--cluster-name=sertac-k8s-vmss-msi\\\", \\\"--cluster-signing-cert-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cluster-signing-key-file=/etc/kubernetes/certs/ca.key\\\", \\\"--configure-cloud-routes=false\\\", \\\"--feature-gates=ServiceNodeExclusion=true\\\", \\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--node-monitor-grace-period=40s\\\", \\\"--pod-eviction-timeout=5m0s\\\", \\\"--profiling=false\\\", \\\"--root-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--route-reconciliation-period=10s\\\", \\\"--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--terminated-pod-gc-threshold=5000\\\", \\\"--use-service-account-credentials=true\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesAPIServerConfig>|\\\"--advertise-address=<kubernetesAPIServerIP>\\\", \\\"--allow-privileged=true\\\", \\\"--anonymous-auth=false\\\", \\\"--audit-log-maxage=30\\\", \\\"--audit-log-maxbackup=10\\\", \\\"--audit-log-maxsize=100\\\", \\\"--audit-log-path=/var/log/kubeaudit/audit.log\\\", \\\"--audit-policy-file=/etc/kubernetes/addons/audit-policy.yaml\\\", \\\"--authorization-mode=Node,RBAC\\\", \\\"--bind-address=0.0.0.0\\\", \\\"--client-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,AlwaysPullImages,ExtendedResourceToleration\\\", \\\"--etcd-cafile=/etc/kubernetes/certs/ca.crt\\\", \\\"--etcd-certfile=/etc/kubernetes/certs/etcdclient.crt\\\", \\\"--etcd-keyfile=/etc/kubernetes/certs/etcdclient.key\\\", \\\"--etcd-servers=https://127.0.0.1:2379\\\", \\\"--insecure-port=8080\\\", \\\"--kubelet-client-certificate=/etc/kubernetes/certs/client.crt\\\", \\\"--kubelet-client-key=/etc/kubernetes/certs/client.key\\\", \\\"--profiling=false\\\", \\\"--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt\\\", \\\"--proxy-client-key-file=/etc/kubernetes/certs/proxy.key\\\", \\\"--repair-malformed-updates=false\\\", \\\"--requestheader-allowed-names=\\\", \\\"--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt\\\", \\\"--requestheader-extra-headers-prefix=X-Remote-Extra-\\\", \\\"--requestheader-group-headers=X-Remote-Group\\\", \\\"--requestheader-username-headers=X-Remote-User\\\", \\\"--secure-port=443\\\", \\\"--service-account-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--service-account-lookup=true\\\", \\\"--service-cluster-ip-range=10.0.0.0/16\\\", \\\"--storage-backend=etcd3\\\", \\\"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\\\", \\\"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--v=4\\\"|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesSchedulerConfig>|\\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--profiling=false\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesAPIServerIP>|',variables('kubernetesAPIServerIP'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n- path: \"/opt/azure/containers/mountetcd.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('mountetcdScript'),'\n\n- path: \"/etc/systemd/system/etcd.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=etcd - highly-available key value store\n    Documentation=https://github.com/coreos/etcd\n    Documentation=man:etcd\n    After=network.target\n    Wants=network-online.target\n    [Service]\n    Environment=DAEMON_ARGS=\n    Environment=ETCD_NAME=%H\n    Environment=ETCD_DATA_DIR=\n    EnvironmentFile=-/etc/default/%p\n    Type=notify\n    User=etcd\n    PermissionsStartOnly=true\n    ExecStart=/usr/bin/etcd $DAEMON_ARGS\n    Restart=always\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/setup-etcd.sh\"\n  permissions: \"0744\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -x\n    source /opt/azure/containers/provision_source.sh\n    # TODO standardize/generalize CSE exit codes\n    ERR_ETCD_DOWNLOAD_TIMEOUT=12\n    ERR_SYSTEMCTL_ENABLE_FAIL=3\n    ETCD_VER=v',variables('etcdVersion'),'\n    DOWNLOAD_URL=',variables('etcdDownloadURLBase'),'\n    retrycmd_get_tarball 60 10 /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz ${DOWNLOAD_URL}/etcd-${ETCD_VER}-linux-amd64.tar.gz\n    if [ $? -ne 0 ]; then\n        exit $ERR_ETCD_DOWNLOAD_TIMEOUT\n    fi\n    tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/bin/ --strip-components=1\n    sudo sed -i \"1iETCDCTL_ENDPOINTS=https://127.0.0.1:2379\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CA_FILE=',variables('etcdCaFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_KEY_FILE=',variables('etcdClientKeyFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CERT_FILE=',variables('etcdClientCertFilepath'),'\" /etc/environment\n    /bin/echo DAEMON_ARGS=--name \"',variables('masterVMNames')[copyIndex(variables('masterOffset'))],'\" --peer-client-cert-auth --peer-trusted-ca-file=',variables('etcdCaFilepath'),' --peer-cert-file=',variables('etcdPeerCertFilepath')[copyIndex(variables('masterOffset'))],' --peer-key-file=',variables('etcdPeerKeyFilepath')[copyIndex(variables('masterOffset'))],' --initial-advertise-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --listen-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --client-cert-auth --trusted-ca-file=',variables('etcdCaFilepath'),' --cert-file=',variables('etcdServerCertFilepath'),' --key-file=',variables('etcdServerKeyFilepath'),' --advertise-client-urls \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\" --listen-client-urls \"',concat(variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))], ',https://127.0.0.1:', variables('masterEtcdClientPort')),'\" --initial-cluster-token \"k8s-etcd-cluster\" --initial-cluster ',variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)],' --data-dir \"/var/lib/etcddisk\" --initial-cluster-state \"new\" | tee -a /etc/default/etcd\n\n\nruncmd:\n- set -x\n- timeout 10 apt-mark hold walinuxagent\n- timeout 10 apt-mark unhold walinuxagent\n- mkdir -p /var/log/azure && touch /var/log/azure/cloud-init.complete\n\n'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[variables('sshPublicKeyData')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "dataDisks": [
              {
                "createOption": "Empty",
                "diskSizeGB": "[variables('etcdDiskSizeGB')]",
                "lun": 0,
                "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'-etcddisk')]"
              }
            ],
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSku')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          }
        },
        "tags": {
          "acsengineVersion": "[variables('acsengineVersion')]",
          "creationSource": "[concat(variables('generatorCode'), '-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
          "orchestrator": "[variables('orchestratorNameVersionTag')]",
          "poolName": "master",
          "resourceNameSuffix": "[variables('nameSuffix')]"
        },
        "type": "Microsoft.Compute/virtualMachines"
      },
      {
        "apiVersion": "2014-10-01-preview",
        "copy": {
          "count": "[variables('masterCount')]",
          "name": "vmLoopNode"
        },
        "name": "[guid(concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(),'vmidentity'))]",
        "properties": {
          "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex()), '2017-03-30', 'Full').identity.principalId]",
          "roleDefinitionId": "[variables('contributorRoleDefinitionId')]"
        },
        "type": "Microsoft.Authorization/roleAssignments"
      },
      {
        "apiVersion": "2015-05-01-preview",
        "copy": {
          "count": "[variables('masterCount')]",
          "name": "vmLoopNode"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex())]",
          "[concat('Microsoft.Authorization/roleAssignments/', guid(concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(), 'vmidentity')))]"
        ],
        "location": "[resourceGroup().location]",
        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/ManagedIdentityExtension')]",
        "properties": {
          "autoUpgradeMinorVersion": true,
          "protectedSettings": {},
          "publisher": "Microsoft.ManagedIdentity",
          "settings": {
            "port": 50343
          },
          "type": "ManagedIdentityExtensionForLinux",
          "typeHandlerVersion": "1.0"
        },
        "type": "Microsoft.Compute/virtualMachines/extensions"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "copy": {
          "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
          "name": "vmLoopNode"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')), '/extensions/ManagedIdentityExtension')]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'/cse', '-master-', copyIndex(variables('masterOffset')))]",
        "properties": {
          "autoUpgradeMinorVersion": true,
          "protectedSettings": {
            "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' ',variables('provisionScriptParametersMaster'), ' MASTER_INDEX=',copyIndex(variables('masterOffset')),' /usr/bin/nohup /bin/bash -c \"stat /opt/azure/containers/provision.complete > /dev/null 2>&1 || /bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
          },
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {},
          "type": "CustomScript",
          "typeHandlerVersion": "2.0"
        },
        "type": "Microsoft.Compute/virtualMachines/extensions"
      },
      {
        "apiVersion": "[variables('apiVersionDefault')]",
        "copy": {
          "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
          "name": "vmLoopNode"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')), '/computeAksLinuxBilling')]",
        "properties": {
          "autoUpgradeMinorVersion": true,
          "publisher": "Microsoft.AKS",
          "settings": {},
          "type": "Compute.AKS-Engine.Linux.Billing",
          "typeHandlerVersion": "1.0"
        },
        "type": "Microsoft.Compute/virtualMachines/extensions"
      }
    ],
    "outputs": {
      "masterFQDN": {
        "type": "string",
        "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
      },
      "primaryAvailabilitySetName": {
        "type": "string",
        "value": "[variables('primaryAvailabilitySetName')]"
      },
      "resourceGroup": {
        "type": "string",
        "value": "[variables('resourceGroup')]"
      },
      "routeTableName": {
        "type": "string",
        "value": "[variables('routeTableName')]"
      },
      "securityGroupName": {
        "type": "string",
        "value": "[variables('nsgName')]"
      },
      "subnetName": {
        "type": "string",
        "value": "[variables('subnetName')]"
      },
      "virtualNetworkName": {
        "type": "string",
        "value": "[variables('virtualNetworkName')]"
      },
      "vnetResourceGroup": {
        "type": "string",
        "value": "[variables('virtualNetworkResourceGroupName')]"
      }
    }
  }
